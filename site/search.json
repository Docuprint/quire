[{"content":"Quire is currently in closed development. To request access, please fill out our Quire Beta Request form.\nQuire is a modern, multiformat publishing framework designed to create books as authoritative and enduring as print, and as vibrant and feature-rich as the web, from a single set of plain text files. All without ever signing-up for an account, paying a fee, or setting up and maintaining a complicated server.\nQuire books are scholarly, visual, and built for discoverability and longevity. They feature:\n Page-level citation Footnotes Bibliographies Figure images and image groups Zooming images and maps Video and audio embeds Dynamic tables of contents and menus Full-text search Responsive web design Web accessibility and SEO optimized Outputs to web, PDF, and EPUB formats  View some of the books developed with early versions of Quire.\nFor more information, contact Greg Albers, Digital Publications Manager at the J. Paul Getty Trust, at galbers@getty.edu.\n","headings":null,"id":0,"length":149,"title":"Quire","type":"cover","url":"https://gettypubs.github.io/quire/"},{"content":" Getting Started Quire is a publishing framework, meaning it’s not one tool or process, but rather a network of many things hooked together. When you work in Quire, you’ll be using a text editor, a command line shell, and a web browser. You use the text editor to edit your publication files, the command line shell to tell Quire what to do (like quire new to start a new project and quire pdf to build the PDF version), and the web browser to preview your work.\ncommand line shell, browser, text editor    In the following sections, we’ll get more familiar with these tools, and get you up and running with your first Quire project.\n1. Install Quire and Its Dependencies The first thing you’ll need is a command line shell. Along with using it to run Quire, we’ll also use it to install some of Quire’s dependencies (the other programs Quire is dependent on in order to run).\nWorking in a Command Line Shell Macs already have a good shell installed. It’s called Terminal and can be found in the Applications/Utilities folder. (Or, hit Command-Space Bar and type \u0026ldquo;Terminal\u0026rdquo; to search for it.) For PCs, we recommend installing Git for Windows which comes with a shell called Git Bash.\nThe shell is a text-based window into the contents of your computer, and a space where you can run program commands. Like opening a new graphical window on your computer showing the contents of a particular folder (directory), when you open your shell, you will also be in a particular directory.\nfolder and command line side-by-side    When you open your shell program you will probably be in your main user directory by default. With the shell open, you can type ls (\u0026ldquo;list\u0026rdquo;) to list the folders and files in your current location. Or type cd (\u0026ldquo;change directory\u0026rdquo;) and the name of one of those other folders (like cd Downloads), and the shell will take you into it.\nInstalling Follow the link below for either Mac or PC installation.\nMac and PC installation\n2. Create and preview a new starter project [For PC users, see the instructions in the PC installation guide on starting and previewing new Quire projects.]\nTo start a new Quire project, open your shell and type quire new my-project. Quire will download a new starter project named “my-project” into your current directory. (If you are using the Beta, you may need to enter your GitHub username and password twice during the download process. One for the starter kit and once for the starter theme.)\nOnce the download is complete, still in your shell, type cd my-project and hit enter (which means change directory into the directory called “my-project”, which was just created with the quire new my-project command), and then type quire preview and enter again.\ncd my-project quire preview Open your browser and go to http://localhost:1313 to see the starter publication that Quire is now previewing.\n3. Customize the metadata, content, and styles to make it your own To start customizing your publication, you’ll need a text editor. This goes with the command line shell you have for installing and entering Quire commands, and the browser you use for previewing.\nWorking in a Text Editor Like its name implies, a text editor is simply a program to edit text. It’s like Microsoft Word, but instead of dealing with text formatted for printing, text editors specialize in text formatted for code and markup. You can use a text editor to edit all the different kinds of files in your Quire project, from chapters written in Markdown, to metadata written in YAML, and styles written in CSS.\nMacs and PCs come with some simple text editors built-in, but we recommend using something like Atom which offers a more in terms of auto-formatting as well as being able to see and work in multiple text files at a time.\nOnce installed, open your text editor and locate and open the my-project directory you created in Step 2 above. If you’re using a text editor like Atom, you will see all of the directory’s contents listed.\nmy-project open in Atom    Publication Metadata Start by opening the data directory, and the publication.yml file. This file is all the metadata for your publication, much of which is used in various areas of your site.\nTry changing the title and subtitle, hitting save, and then looking at the preview running in your browser. You’ll see that the cover is updated with your new title. It’s also updated in the top navigation bar, and in the expandable menu on the site. As much as possible, Quire works on the principle of having content exist only in one place in your files, and using code to display it in multiple places in the publication as needed. This means when you make a change to something, you only do it once and it changes everywhere.\nThe format of this metadata is called YAML (yam-ul). It’s designed to be a plain text way of capturing data. The general principal is to have the name of the data items are followed by a colon, a space, and then the data item’s value. The names are always be lowercase letters and underscores for spaces. The values can be anything, but sometimes may need to be surrounded in quotes to avoid validation issues. You can always copy and paste your YAML into an online validator to check it.\ntitle:\u0026#34;My Quire Project\u0026#34; The two other files in the data directory, figures.yml and references.yml, are data for figure images and bibliographic references. You can remove either if you won’t be using them.\nRead more in the “Publication Configuration \u0026amp; Metadata” chapter of this guide.\nPublication Content Now open the content directory. In this directory are a series of Markdown files (.md) that hold the content of the publication. Each one represents a page of your website. The filename becomes part of the URL for that page in your final publication, so it’s always lowercase and includes no spaces or special characters.\nOpen the about.md file. At the top is a small block of YAML (surrounded in two sets of three dashes ---) that gives the title, type and weight for that page. The weight value creates the sort order of pages for your book. The page in the content directory with the lowest value will be first, the rest will be ordered after it numerically. The numbering need not be consecutive.\nBelow the YAML block is where your content goes. Type something here, save the file and check the preview you’re running in the browser at http://localhost:1313/about/. You should see the update.\nQuire content is written in Markdown. Markdown allows you to express content structure as minimally as possible, using simple text indicators. Paragraphs are made with double line breaks; asterisks around text will make it italic, double asterisks will make it bold; headings are made with hashmarks preceding the heading text.\n# Heading 1 ## Heading 2 ### Heading 3 *Italic Text* **Bold Text**[Link Text](http://www.linkadress.com) Quire also extends Markdown’s capabilities with a set of shortcodes. Type the following figure image shortcode on a new line in your about.md file, hit save and check the preview in your browser.\n{{\u0026lt; q-figure id=\u0026#34;1.1\u0026#34; \u0026gt;}} You’ll see that a figure and caption was added, the information for which is stored in the project’s figures.yml file under the id of \u0026ldquo;1.1\u0026rdquo;. If you update the information stored in figures.yml it will update on your page, as well as anywhere else that figure is used.\nRead more about Page YAML, Markdown and Quire shortcodes in the “Pages \u0026amp; Plain Text” chapter of this guide.\nPublication Styles There are number of different ways to customize the look of your publication. Some of the easiest are to add your own background image to your cover and any page banners you like, and to change the colors of different interface elements.\nFirst, open the cover.md file and try adding image: cover_bg.jpg to the YAML block, hitting save, and previewing the results in the browser. The image itself is stored in the static directory of your project, in an img sub-directory. You can point the cover image to any image in this directory. You’ll see this is also where images are stored for use with the q-figure shortcode demonstrated above. Page banner images can be added in the same way, simply by adding an image filename under image: in the YAML for that page.\nNext, we can change the colors used in various elements of the site design. For that, we need to look in the themes directory of the project. By default, the quire new command installs the quire-starter-theme here, but down the road, you could potentially switch in a different theme (once they are available). For now, look inside the theme for the source/css sub-directories and inside that, the application.scss file. Here you’ll find a number of variables, prefixed with a dollar sign, that are descriptive of what they control. For instance $quire-navbar-background-color is the background color of the navigation bar at the top of every page. Change it to something new, like a Hex value, or one of the standard 140 color keywords, save the change, and preview in your browser.\n$quire-navbar-background-color: honeydew; Just make sure there’s always a space between the colon and the value you enter, and that the value is immediately proceeded by a semi-colon. If you don’t see the change, you may need to refresh the browser window.\nPC users won’t yet be able to customize style variables in this way, but can instead edit the styles directly in quire-starter-theme/static/css/application.css.\nRead more about applying your own custom CSS styles, altering page templates, and creating a new theme in the “Customizing Styles” chapter of this guide.\n4. Output your publication In your Terminal, if it is still running, stop the quire preview process by typing Control-C. To create the PDF version of your publication type quire pdf and Enter. For the EPUB, type quire epub and Enter. Both files will be created about saved into your project’s static/downloads directory.\nFor the online edition, type quire build and Enter. A public directory will be created in your project, with all the website files inside. If public directory already exists, quire build will simply update it with the latest changes in your project. The files in public can then be copied onto virtually any web server or hosting service. They are all you need for the site, and will look just as they did when running quire preview locally.\nFor online hosting, you can also use GitHub Pages which is convenient if you’ll be using GitHub for version control and project management.\nRead more about outputting your publication files, deploying your site, and using GitHub in the “Multiformat Output” chapter of this guide.\n","headings":["\u003ch2 id=\"1-install-quire-and-its-dependencies\"\u003e1. Install Quire and Its Dependencies\u003c/h2\u003e","\u003ch3 id=\"working-in-a-command-line-shell\"\u003eWorking in a Command Line Shell\u003c/h3\u003e","\u003ch3 id=\"installing\"\u003eInstalling\u003c/h3\u003e","\u003ch2 id=\"2-create-and-preview-a-new-starter-project\"\u003e2. Create and preview a new starter project\u003c/h2\u003e","\u003ch2 id=\"3-customize-the-metadata-content-and-styles-to-make-it-your-own\"\u003e3. Customize the metadata, content, and styles to make it your own\u003c/h2\u003e","\u003ch3 id=\"working-in-a-text-editor\"\u003eWorking in a Text Editor\u003c/h3\u003e","\u003ch3 id=\"publication-metadata\"\u003ePublication Metadata\u003c/h3\u003e","\u003ch3 id=\"publication-content\"\u003ePublication Content\u003c/h3\u003e","\u003ch3 id=\"publication-styles\"\u003ePublication Styles\u003c/h3\u003e","\u003ch2 id=\"4-output-your-publication\"\u003e4. Output your publication\u003c/h2\u003e"],"id":1,"length":1806,"title":"Getting Started","type":"essay","url":"https://gettypubs.github.io/quire/getting-started/"},{"content":" Mac Os installation Open your your Terminal command line application and follow the four steps below. First to install support software for Quire, and then Quire itself. Note that when you type a password in the command line, the cursor doesn’t move, but your typing is being registered. Simply type the password, and hit Enter.\n Install Apple’s Xcode by copying and pasting the following command and hitting enter. After hitting ender, an additional alert notification will pop up. Click “Install” and follow the prompts.\nxcode-select --install Visit the Node.js site, and download and install the current LTS (long-term support) version: https://nodejs.org\n Visit the PrinceXML site, download the Mac OS version, and uncompress the folder: http://www.princexml.com/download/\nCopy and paste the following two lines in your Terminal at once and press enter. Note that this assumes the file downloaded into your Downloads folder (the Mac default) and that the version you downloaded was 11.3, you can update the command if either of these is not the case.\ncd Downloads/prince-11.3-macosx sudo ./install.sh The Terminal will ask for your computer password. After entering it another message will appear in the Terminal shell to confirm that PrinceXML should be installed in the /usr/local directory. Press enter.\nWhen complete, type cd into the Terminal to return to your home/user directory.\ncd Visit the Pandoc site, download the Mac OS version. The easiest way to install Pandoc on a Mac is to download the .pkg file. Install this file by double clicking the icon and following the prompts. Visit this page https://github.com/jgm/pandoc/releases/ to download the latest release.\n Copy and paste the following line into your Terminal to download the Quire CLI (command line application) to your computer from GitHub.\ngit clone https://github.com/gettypubs/quire-cli.git You may asked to enter your GitHub username and password. When complete, install the CLI by copying and pasting the following commands into your Terminal and pressing enter. The first resets user permissions for your local directory, the second installs Quire.\nsudo chown -R $USER /usr/localcd quire-cli npm install -g  When complete, type quire --version to confirm proper installation. It should return a version number, otherwise, if it says command not found, the Quire CLI has not been properly installed. Refer to the “Troubleshooting” section below.\nTroubleshooting TK\nWindows Installation  Download Git for Windows by clicking on \u0026ldquo;Download\u0026rdquo; at https://gitforwindows.org/. An exe file will be downloaded, click on it and hit \u0026ldquo;run\u0026rdquo;, you should see a setup wizard screen that will install Git for Windows. During the installation, use the default settings.\n Download and install Node.js and npm at https://nodejs.org/en/download/. Make sure you get the LTS version of Node.js, npm will be installed during the same process. The Windows installer will be downloaded, just open it and a setup wizard screen will guide you through the process.\n Download Prince for Windows. You would download either the 32-bit installer or the 64-bit installer depending on your operating system. To install Prince you can follow the instructions at their site: https://www.princexml.com/doc-install/#windows\n Open PowerShell (that should be installed by default in your Windows computer) and run it as administrator. To do so, right click on the icon and select \u0026ldquo;run as administrator\u0026rdquo; from the context menu.\nThen once you get the administrator PowerShell window, type the following command:\nnpm install --g --production windows-build-tools This command installs c++ 2015 build tools and python 2 required for node-gyp. The process will take some time and you\u0026rsquo;ll see the prompt with your the name of your computer and your username once it\u0026rsquo;s complete.\n Continue using PowerShell, but this time it\u0026rsquo;s not required to run it as administrator (you can close the administrator window and open a new one) and type the following command to download Quire CLI to your computer from GitHub:\ngit clone https://github.com/gettypubs/quire-cli A pop up window may emerge and ask you to type your GitHub username and password, then the download starts.\nChange directory to the quire-cli folder:\ncd quire-cli and type:\ngit checkout pc-dev The following command will install dependencies:\nnpm install -g Installing the dependencies takes some time and you\u0026rsquo;ll notice multiple text strings being generated on the screen during the process. Wait until the prompt with your username shows up and then, to verify that quire-cli has been installed correctly, type:\nquire -V If version number is returned, means that the install is correct.\n Lastly, to navigate to your home directory and create a new project or publication type:\ncd ~  LINUX Install the Windows Subsystem for Linux:\n Open PowerShell as Administrator (that should be installed by default in your Windows computer). To do so, right click on the icon and select \u0026ldquo;run as administrator\u0026rdquo; from the context menu. Once you get the administrator window, type the following command:\nEnable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux  Restart your computer when prompted by typing yes (y) or no (n).\n Install the Subsystem for Linux:  We recommend to use the LTS version of Ubuntu Desktop that you\u0026rsquo;ll find in the Microsoft Store. From the app page, select \u0026ldquo;Get the app\u0026rdquo; and once the download has completed, select \u0026ldquo;Launch\u0026rdquo;.\nIf you have a preferred Linux distribution you can also download and install it from the Microsoft Store.  Now that you have access to the command line in the Linux Subsystem this can be considered a Linux install.\n Open terminal (If you are coming from the Windows 10 instructions this should already be open)\n Download and install Prince:\ncd ~ Run these commands to download and install PrinceXML\nwget https://www.princexml.com/download/prince_12-1_ubuntu18.04_amd64.deb sudo gdebi prince_10r2-1_debian8.0_amd64.deb If you chose a different distribution of Linux there are more instructions here -\u0026gt; https://www.princexml.com/doc-install/#linux\n Install node js and npm through nvm\n  Detailed information about this installation can be found in this link https://github.com/creationix/nvm#install-script\nTo install or update nvm, you can use the install script using cURL:\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash or Wget:\nwget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash The script clones the nvm repository to ~/.nvm and adds the source line to your profile (~/.bash_profile, ~/.zshrc, ~/.profile, or ~/.bashrc).\nexport NVM_DIR=\u0026#34;$HOME/.nvm\u0026#34; [ -s \u0026#34;$NVM_DIR/nvm.sh\u0026#34; ] \u0026amp;\u0026amp; \\. \u0026#34;$NVM_DIR/nvm.sh\u0026#34; # This loads nvm Note: You can add --no-use to the end of the above script (\u0026hellip;nvm.sh --no-use) to postpone using nvm until you manually use it.\nYou can customize the install source, directory, profile, and version using the NVM_SOURCE, NVM_DIR, PROFILE, and NODE_VERSION variables. Eg: curl ... | NVM_DIR=\u0026quot;path/to/nvm\u0026quot;. Ensure that the NVM_DIR does not contain a trailing slash.\nNB. The installer can use git, curl, or wget to download nvm, whatever is available.\nNote: On Linux, after running the install script, if you get nvm: command not found or see no feedback from your terminal after you type:\ncommand -v nvm simply close your current terminal, open a new terminal, and try verifying again.\nIf the above doesn\u0026rsquo;t fix the problem, open your .bash_profile and add the following line of code:\nsource ~/.bashrc For more information about this issue and possible workarounds, please refer here To verify that nvm has been installed, do:\ncommand -v nvm which should output \u0026lsquo;nvm\u0026rsquo; if the installation was successful. Please note that which nvm will not work, since nvm is a sourced shell function, not an executable binary. To download, compile, and install the latest release of node, do this:\nnvm install node And then in any new shell just use the installed version:\nnvm use node  Install Pandoc for EPUB and MOBI output  cd ~ Visit https://github.com/jgm/pandoc/releases and download the latest .deb file\nwget https://github.com/jgm/pandoc/releases/download/2.2.3.2/pandoc-2.2.3.2-1-amd64.deb Install the .deb file\nsudo dpkg -i pandoc-2.2.3.2-1-amd64.deb This will install the pandoc and pandoc-citeproc executables and man pages.\nVerify pandoc was installed\npandoc -v If Pandoc version information is returned then Pandoc was successfully installed on your system.\n Install Quire-CLI\ngit clone https://github.com/gettypubs/quire-clicd quire-cligit checkout pc-dev Install Dependencies\nnpm install -g Verify\nquire -V If version number is returned quire-cli was installed correctly, you can now leave the directory.\ncd ~  Starting a New Quire Project The steps you follow to create a new Quire publication or project are the same for MAC Os and all Windows versions.\n To create a new project type:\nquire new your-project-name This command will install the starter kit, set up the theme and install dependencies wait until you see a text string that says \u0026ldquo;theme and dependencies sucessfully installed\u0026rdquo; and the prompt with your username pops up.\n Then enter the new directory by typing:\ncd your-project-name And install starter theme dependencies with the following command:\nquire install This process can last a few minutes, once again wait until you see the prompt.\n Now you can preview the project, and any edits you\u0026rsquo;d make, by typing:\nquire preview Once running, open a browser and visit http://localhost:1313 to see the publication. To stop the preview you can either press ctrl+c or type quire stop.\n  Troubleshooting TK\nUpdating the Quire CLI As we develop, you may also want/need to update your Quire CLI. In particular, the CLI is pegged to a particular version of the Quire Starter Theme (at least for now), so if you’re using an older CLI any new projects you start will also have an older version of the theme.\n In your User/Home directory where you initially installed Quire, look for the quire-cli folder and delete it.\n In your command line shell, enter the following three commands in order:\ngit clone https://github.com/gettypubs/quire-cli.gitcd quire-clinpm install -g  You now have the latest Quire CLI and any new projects you start will also have the newest theme. Your previously-started projects will keep their original version of theme. You may in some cases see errors or issues when running Quire commands with a newer version of the CLI, in older projects. These can be fixed manually, or, you can also always re-install your original version of the CLI to run those older projects if necessary.\nUninstalling Quire To uninstall Quire:\n From a new window in your Definition: Command Line InterfaceCommand line interface or CLI is a text-based user interface for running tasks. In it, the user issues commands in the form of a text (you should be in your home/user directory where you initially installed Quire) type the following two commands:\ncd quire-clinpm uninstall -g In the folder/finder view, go to your user/home directory where you initially installed Quire, look for the quire-cli folder and delete it.\n  ","headings":["\u003ch2 id=\"mac-os-installation\"\u003eMac Os installation\u003c/h2\u003e","\u003ch3 id=\"troubleshooting\"\u003eTroubleshooting\u003c/h3\u003e","\u003ch2 id=\"windows-installation\"\u003eWindows Installation\u003c/h2\u003e","\u003ch2 id=\"linux\"\u003eLINUX\u003c/h2\u003e","\u003ch2 id=\"starting-a-new-quire-project\"\u003eStarting a New Quire Project\u003c/h2\u003e","\u003ch3 id=\"troubleshooting-1\"\u003eTroubleshooting\u003c/h3\u003e","\u003ch2 id=\"updating-the-quire-cli\"\u003eUpdating the Quire CLI\u003c/h2\u003e","\u003ch2 id=\"uninstalling-quire\"\u003eUninstalling Quire\u003c/h2\u003e"],"id":2,"length":1704,"title":"Install and Uninstall","type":"essay","url":"https://gettypubs.github.io/quire/guide/install-uninstall/"},{"content":" Inside each Quire project, Definition: HugoThe static site generator that powers Quire: https://gohugo.io/ will define the following directories and files:\nFile structure    The three directories that most users work in are content, data, and static. Developers and designers will also make use of themes.  📁 bin Currently it only contains a deploy.sh script file for deploying a Quire project to GitHub pages. May be eliminated. Read more in Outputting \u0026amp; Deploying Your Site.\n📁 config This is a configuration directory While most Quire configuration happens in the config.yml file as explained below, the config directory gives more specific controls for different output formats and development environments. In most cases changes won’t need to be made to these files until you are deploying your site. Read more in Outputting \u0026amp; Deploying Your Site.\n📁 content The central part of a Quire, the content directory is where almost all of a publication’s text content will live as individual Definition: Markdown fileA file formatted in Markdown that generates a Web page. Markdown files have a YAML block at the top containing the metadata of the page.s. Every Markdown file is a page of the publication. You can read more about how to structure the publication content in Pages \u0026amp; Plain Text.\n📁 data What content doesn’t live in content directory as a Definition: Markdown fileA file formatted in Markdown that generates a Web page. Markdown files have a YAML block at the top containing the metadata of the page., will live here in the data directory as a Definition: YAMLYAML files are used to describe data. YAML is a human-readable data serialization language. file. A publication.yml file is required (read more in Publication Metadata \u0026amp; Configuration), but a Quire project may also include references.yml (Citations \u0026amp; Bibliographies); figures.yml (Figures); and objects.yml (not yet defined).\n📁 site Where the built pages of the Quire website will be. This folder and its contents are automatically generated with the quire build command in the Definition: Command Line InterfaceCommand line interface or CLI is a text-based user interface for running tasks. In it, the user issues commands in the form of a text, and should not be edited directly.\n[note/warning] The site directory won’t be present in the project until running quire build command the first time. And even then, may not be viewable in a text editor (depending on which is used) as it’s included in .gitignore. Read more in Outputting \u0026amp; Deploying Your Site.\n📁 static The static directory includes anything that will be included in your final publication, but that doesn’t have to first be processed through the Hugo Definition: Static-site GeneratorA static site generator is a framework that generates a static website from source files.. By default, this includes a css directory for directly overriding theme styles (read more in Customizing Styles); a downloads directory for the multiple Quire formats (Outputting \u0026amp; Deploying Your Site); and an img directory for all image and other media assets (Figure Images).\n📁 themes The themes directory contains one or more Definition: themeThemes define the overall style of your website. It determines the use of colors, layout elements, and text positioning.s that define the structure and style of the Quire publication. When using the quire new command in the Definition: Command Line InterfaceCommand line interface or CLI is a text-based user interface for running tasks. In it, the user issues commands in the form of a text, the default theme is quire-starter-theme. Read more in Customizing Styles.\n📄 .gitignore If you are using git for Definition: Version controlVersion control is a system that records changes to a file or set of files over time so that you can recall specific versions later. Git is the version control system that Github host. You can learn more about version control at: https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control., this file defines which files and/or directories should be ignored.\n📄 config.yml This is a standard, and required file for Hugo, and so also for Quire. In Quire, it is used expressly for configuring how Hugo operates, and for defining a number of key values used in Quire Definition: templateThemes may include one or more templates. Templates are the variety of layouts a theme has.s.\nUsers who have worked on other non-Quire Hugo projects will note that they typically use the config.yml file to also store publication metadata. Given the potentially large scope of this metadata in formal digital publications, Quire additionally uses publication.yml file inside the data directory for that purpose. Read more in Publication Metadata \u0026amp; Configuration.  📄 README.md The README.md file is a code convention, and is a free space for information about the publication and specifically, its codebase. It is not used in the output Quire publication at all. However, if you host your Quire project on Definition: GitHubGitHub is a code hosting platform for version control and collaboration. For an introductory guide to it, visit: https://guides.github.com/activities/hello-world/#what or other similar git project management sites, the README.md file is used for the repository’s front page description. Often it will include notes on development, on what usage is allowed, on how issues will be handled and if contributions should be considered. Read more in Outputting \u0026amp; Deploying Your Site.\n","headings":["\u003ch2 id=\"bin\"\u003e📁 bin\u003c/h2\u003e","\u003ch2 id=\"config\"\u003e📁 config\u003c/h2\u003e","\u003ch2 id=\"content\"\u003e📁 content\u003c/h2\u003e","\u003ch2 id=\"data\"\u003e📁 data\u003c/h2\u003e","\u003ch2 id=\"site\"\u003e📁 site\u003c/h2\u003e","\u003ch2 id=\"static\"\u003e📁 static\u003c/h2\u003e","\u003ch2 id=\"themes\"\u003e📁 themes\u003c/h2\u003e","\u003ch2 id=\"gitignore\"\u003e📄 .gitignore\u003c/h2\u003e","\u003ch2 id=\"config-yml\"\u003e📄 config.yml\u003c/h2\u003e","\u003ch2 id=\"readme-md\"\u003e📄 README.md\u003c/h2\u003e"],"id":3,"length":864,"title":"Quire Project File Structure","type":"essay","url":"https://gettypubs.github.io/quire/guide/quire-project-file-structure/"},{"content":" Quire uses two Definition: YAMLYAML files are used to describe data. YAML is a human-readable data serialization language. files as sources of the metadata and to define how the publication works. In this page, we list the YAML properties and values that need to be defined in the two following files: config.yml and publication.yml. By default, both config.yml and publication.yml will be generated when you create a Quire project, however the values of the properties will be either edited or added to the properties listed as we describe below.\nYou can read more about YAML syntax basics and check out a sample of the publication.yml file in other chapters of this guide.\nAdjusting the Default Publication Settings in the config.yml File The config.yml file is a standard and required file for Definition: HugoThe static site generator that powers Quire: https://gohugo.io/, and so also for Quire. In Quire, it is used expressly for configuring how Hugo operates, and for defining a number of key values used in Quire Definition: templatesThemes may include one or more templates. Templates are the variety of layouts a theme has.. Users who have worked on other non-Quire Hugo projects will note that those typically use the config.yml file to also store publication metadata. Given the potentially large scope of this kind of metadata in formal digital publications, Quire instead uses publication.yml file inside the data directory for that purpose (see below).\nThe properties in the config.yml file are individually documented in the API/Docs section, however, a few key items to note:\n While Quire exclusively uses the title value as defined in your publication.yml file, other Definition: HugoThe static site generator that powers Quire: https://gohugo.io/ projects require a title value in the config.yml file, so it is a good idea to include it here as well.\n The theme value should match the name of the folder in the /themes directory that contains your theme files; if you\u0026rsquo;ve copied the default Definition: themeThemes define the overall style of your website. It determines the use of colors, layout elements, and text positioning. and given it a different name make sure to update the value here too.\n The params section includes a number of values specific to various Quire layout Definition: templatesThemes may include one or more templates. Templates are the variety of layouts a theme has. and Definition: shortcodesA shortcode is a simple snippet inside a content file that Hugo/Quire will render using a predefined template. For more information about shortcodes visit the Hugo website: https://gohugo.io/content-management/shortcodes/. All are provided with default values, and should be changed with care. In cases where a value should be deleted entirely, it is usually best to leave it as empty double quotes (\u0026quot;\u0026quot;) rather than completely deleting it.\n  Adding and Editing Important Metadata in the publication.yml File The publication.yml file in the /data directory is the source of metadata for your publication. While the only value that is truly required is the one for the property title, it is a good idea to fill out the publication.yml file as completely as possible. Many of the properties are used in the metadata, which is automatically included in the underlying code of every page of the online edition of your publication to support Definition: Search Engine Optimization (SEO)Search engine optimization, SEO, is the process of increasing the online visibility of a website or a web page in a web search engine\u0026rsquo;s unpaid results and general discovery.\nSome key areas are summed up below, and match headings in the publication.yml file itself, but there is a detailed documentation of individual properties and their values in the API/Docs section of this guide.\nTitle \u0026amp; Description Of the possible properties in this section, title, and the optional subtitle and reading_line are the most important. If your title is particularly long, the short_title property can be used to provide an alternative for the navigation elements of the online book where long titles will otherwise be truncated.\nIt is also a good idea to include both one_line and full descriptions as these are used in the publication SEO metadata and often on the Cover and About or Copyright pages.\nPublication Details The values of url, pub_date, and language should be filled out. - url should be the final URL where your publication will live (its permalink) and should include http:// or https:// as appropriate. - The value of pub_date must follow a YYYY-MM-DD format (the Definition: ISO 8601 formatISO 8601 describes an internationally accepted way to represent dates and times using numbers. More information about the format can be found at the ISO website: https://www.iso.org/iso-8601-date-and-time-format.html) and should be the projected final publication date. - Lastly, language should be a 2-letter Definition: ISO 639-1 language codeISO 639 is the International Standard for language codes. More information about the standard can be found at the ISO website: https://www.iso.org/iso-639-language-codes.html. The default value is en (English) and other languages can be used.\nThere’s an optional pub_type property whose values are book, journal-periodical, or other. If you use the value book, it is recommended you also include an Definition: ISBNThe International Standard Book Number, or ISBN, identifies books or book-like products, as well as their publishers. There is one ISBN agency per country, the U.S. ISBN Agency can be found at: https://www.isbn.org/ as a standard identifier. And if you use the value journal-periodical, you should include information for the Definition: ISSNThe International Standard Serial Number, or ISSN, identifies newspapers, journals, magazines and periodicals of all kinds and on all media–print and electronic. For more information visit: http://www.issn.org/, series_periodical_name, and series_issue_number attributes if possible.\nBoth Definition: ISBNThe International Standard Book Number, or ISBN, identifies books or book-like products, as well as their publishers. There is one ISBN agency per country, the U.S. ISBN Agency can be found at: https://www.isbn.org/ and Definition: ISSNThe International Standard Serial Number, or ISSN, identifies newspapers, journals, magazines and periodicals of all kinds and on all media–print and electronic. For more information visit: http://www.issn.org/ are to consider if you want libraries to catalog your publication. Along with isbn and issn, doi and uuid are also supported so you can add these attributes as identifiers:\nidentifier:isbn:978-1-12345-678-9uuid:4a1b423d-6d5a-469b-bd5f-b498182ad6ca Definition: DOIsThe digital object identifier (DOI) is a unique alphanumeric string that identifies content and provides a persistent link to its location on the Web. DOIs are assigned the International DOI Foundation: https://www.doi.org/ are widely used in academic contexts to support citation while Definition: UUIDsA universally unique identifier or UUID is a 128-bit number used to identify information in computer systems serve to identify information in computer systems.\nNote that the isbn and issn identifiers used here are for the online edition specifically. Identifiers for other specific editions (PDF/Print, EPUB, and MOBI) can be defined separately with the appropriate resource_link. See the Formats, Resources \u0026amp; Links section below for more.  Lastly, Quire supports publications with multiple publishers, but at least one publisher should be listed with a name, location and url attributes. In particular, this is used in the citation features as well as in search engine metadata.\nContributors Every publication should have at least one contributor. The contributor item type can have one of three values: primary, secondary, or project-team. The primary contributors are those that would show up on the Cover, Menu and Title Page of a publication, and may include authors, editors, translators and others. Contributors should, at a minimum, be listed with a first_name and last_name (or alternately just a full_name).\nAn optional contributor_as_it_appears value allows for more fine-grained control in the way contributors are listed. It could be, for example, something like \u0026ldquo;Edited by Rose Valland and Denis Diderot\u0026rdquo;. Even when using contributor_as_it_appears though, the contributors should still also be individually listed as contributors (with a value of primary) for search engine legibility.\nThe editors, designers and developers and others who worked on the title may be listed as contributors with the project-team value. This information is usually then listed on the About and Copyright pages of the publication.\nRead more about this matter in the Contributors chapter of this guide.\nCopyright \u0026amp; License You should include a copyright line property for your publication, and optionally license information property if you are distributing the publication Definition: Open AccessOpen access (OA) refers to free, unrestricted online access to content, frequently research outputs..\nA simple Definition: CopyrightCopyright is a form of protection granted by law for original works of authorship fixed in a tangible medium of expression. For more information about U.S. copyright visit: https://www.copyright.gov/help/faq/faq-general.html#what statement would typically be formatted as \u0026ldquo;© 2018 Author Name\u0026rdquo;.\nThe copyright property does support Markdown formatting to allow for multiple paragraphs and other formatting.  Open access licensing typically means applying one of seven Definition: Creative Commons LicensesCreative Commons licenses are public copyright licenses that enable the free distribution of a work. Every license helps creators retain copyright while allowing others to copy, distribute, and make some non-commercial uses of their work. You can check the different types of Creative Commons licenses at: https://creativecommons.org/share-your-work/licensing-types-examples/licensing-examples/ to your publication. This is in addition to your copyright statement.\n[note]An open Creative Commons license does not replace or supersede copyright in a work, it instead says that the copyright holder is licensing (allowing) others to make use of the work in an open way.\nTo use a Creative Commons license fill in the name, abbreviation, url, and scope values of the license property. scope value should be either full, text-only or some-exceptions and will determine the way the license is worded on your site. To override the wording and link language use the online_text and pdf_ebook_text attributes.\nIf the abbreviation attribute matches one of the seven Definition: Creative Commons LicensesCreative Commons licenses are public copyright licenses that enable the free distribution of a work. Every license helps creators retain copyright while allowing others to copy, distribute, and make some non-commercial uses of their work. You can check the different types of Creative Commons licenses at: https://creativecommons.org/share-your-work/licensing-types-examples/licensing-examples/, an icon will automatically be included, otherwise you can use the icon attribute to point to a specific image file in your images directory.\nFormats, Resources \u0026amp; Links A publication can have multiple resource_link properties, each with the type of other_format, related_resource, or footer_link.\n other_format will be where you can list the PDF, EPUB and MOBI editions of your publication that Quire produces.\n related_resource are for additional items you want to point readers to.\n footer_link are just that and are often links to privacy policies, your own About page, or social media profiles.\n  resource_link properties can also be internal pages of the publication or files from your publication, or can point to external resources or other websites. The atributes type, name (how the resource link will be listed in your publication), and url are required.\nTo facilitate machine readability, it is a good idea to also include link_relation and media_type attributes from the Definition: IANAInternet Assigned Numbers Authority (IANA) is responsible for coordinating Internet’s globally unique identifiers. DNS Root, IP addressing, and other Internet protocol resources are performed as the Internet Assigned Numbers Authority (IANA) functions. For more information visit:https://www.iana.org/ lists if applicable ones for your particular resource are available.\nSubjects Any number of subjects can be added to the publication in order to aid search engine discoverability. They may be formatted as simple keywords, Definition: BISAC Subject CodesDeveloped by BISG, the BISAC Subject Codes List, or BISAC Subject Headings List, is a standard used to categorize books based on topical content. For more information visit: https://bisg.org/page/BISACSubjectCodes, or linked data using the Definition: Getty VocabulariesControlled vocabularies developed to ensure consistency in cataloging and more efficient retrieval of information. For more information visit: http://www.getty.edu/research/tools/vocabularies/, including AAT, ULAN, and TGN.\nFor each subject, indicate the type: keyword, bisac, or getty. For keyword, you only need to include a single comma-separated list under the name attribute.\nsubjects:-type:keywordname:Frenchpainting,19thCentury,Delacroix For all others, each subject should be listed individually and should also include an identifier attribute. For bisac subjects the identifier is the BISAC code, for the Getty vocabularies, it’s the vocabulary’s semantic URL.\nsubjects:-type:bisacname:\u0026#34;ART / European\u0026#34;identifier:ART015030-type:gettyname:\u0026#34;Romantic\u0026#34;identifier:http://vocab.getty.edu/aat/300172863-type:gettyname:\u0026#34;Eugène Delacroix\u0026#34;identifier:http://vocab.getty.edu/ulan/500115509 Revision History A history of post-publication revisions made to the publication typically appears on the About page. Any number of revision history property items can be added and each must include the attributes date and a summary of changes made on that date. The summary attribute supports Markdown formatting, and would typically be in list form.\nIf you are using Definition: GitHubGitHub is a code hosting platform for version control and collaboration. For an introductory guide to it, visit: https://guides.github.com/activities/hello-world/#what or a similar service for more granular version control, you may also include the repository_url in this section. And in this case the revision history collected in the publication.yml can act as an overview. For more, see our revision history policy document.\n","headings":["\u003ch2 id=\"adjusting-the-default-publication-settings-in-the-config-yml-file\"\u003eAdjusting the Default Publication Settings in the \u003ccode\u003econfig.yml\u003c/code\u003e File\u003c/h2\u003e","\u003ch2 id=\"adding-and-editing-important-metadata-in-the-publication-yml-file\"\u003eAdding and Editing Important Metadata in the \u003ccode\u003epublication.yml\u003c/code\u003e File\u003c/h2\u003e","\u003ch3 id=\"title-description\"\u003eTitle \u0026amp; Description\u003c/h3\u003e","\u003ch3 id=\"publication-details\"\u003ePublication Details\u003c/h3\u003e","\u003ch3 id=\"contributors\"\u003eContributors\u003c/h3\u003e","\u003ch3 id=\"copyright-license\"\u003eCopyright \u0026amp; License\u003c/h3\u003e","\u003ch3 id=\"formats-resources-links\"\u003eFormats, Resources \u0026amp; Links\u003c/h3\u003e","\u003ch3 id=\"subjects\"\u003eSubjects\u003c/h3\u003e","\u003ch3 id=\"revision-history\"\u003eRevision History\u003c/h3\u003e"],"id":4,"length":2127,"title":"Publication Configuration \u0026 Metadata","type":"essay","url":"https://gettypubs.github.io/quire/guide/publication-configuration-metadata/"},{"content":" YAML syntax basics Dashes represent individual items in a list. In the example below, there are two contributors, each with a first and last name. Note too, indentations matter in YAML.\nitem:other_item:multiple_items:-item_name:item_description:-item_name:item_description: YAML can include multiple, markdown-style paragraphs by using a pipe character, dropping down a line, and indenting one level. This can be used in areas like captions, descriptions, and abstracts.\nitem:| Using a pipe character, and then dropping down a line and indenting like this allows you to include multiple paragraphs, just as you would in Markdown. Not all Quire YAML attributes expect Markdown though, so check the docs. - Markdown style lists - and other formatting are - also allowed In pages with the extension .md, YAML block entries can be in any order. It doesn\u0026rsquo;t matter if you write:\n---title:Cheatsheettype:page--- Or:\n---type:pagetitle:Cheatsheet--- You’ll also notice that YAML values don’t necessarily need to be in quotes. title: My Chapter, without My Chapter in quotes, works just fine. However, certain formatting and characters (like colons within the text, or lines leading off with asterisks meant to italicize some of the text) can cause issues. In these cases, double quotes can minimize build issues: title: \u0026quot;My Chapter\u0026quot;.\nitem:\u0026#34;If the text here has a colon : or other special characters it should be surrounded in double quotes\u0026#34; Anything at all can go within double-quotes, except for other double-quotes. If you need double-quotes, use “curly quotes”, use a backslash to escape the double quote \\\u0026quot; or Hugo will also process two single straight quotes \u0026ldquo; as a double when building the pages.  It’s always a good idea to copy and paste your YAML blocks into a validator like YAML Lint or Code Beautify validator to make sure there aren’t any hidden errors. You don’t need to use the re-formatted YAML validators like this will sometimes give back to you, you just need to make sure it’s correctly formatted.  Markdown syntax basics Markdown is a very simple, plain text markup language that uses a few text rules to structure content for easy conversion into HTML. Writing in Markdown should be thought of as giving your content structure, not style. By design, and through the stylesheets in the project theme, a list or a blockquote might look different from theme to theme, or even from format to format.\nBasic Markdown Tags Here are the most commonly used tags:\n*Italic Text***Bold Text** Italic Text\nBold Text\n# Heading 1 ## Heading 2 ### Heading 3 #### Heading 4 Heading 1 Heading 2 Heading 3 Heading 4 On the headings, in general you should not use the Heading 1 tag in your content as that should be reserved for the page title, which is automatically generated. Start with Heading 2. Also headings should be thought of as levels of your content outline, not as sizes large to small, though they’re often thought of and used that way. See our Notes on accessibility for more on this.\n\u0026gt; Blockquote  Blockquote\n Links are created with text in brackets followed immediately by a url in parentheses:\n[Link Text](http://www.linkadress.com) Link Text\n- dashes make - a list with - bullets  dashes make  a list with bullets   * asterisks make * a list with * bullets  asterisks make  a list with  bullets    Indented dashes and asterisks create sub bullets in a bulleted list.\n1. numbers make2. a list with3. numbers  numbers make a list with numbers  Markdown Formatting Gotchas  Individual paragraphs are created with double line breaks.\n Special characters like en- and em-dashes, and diacritics also work fine in Markdown and in Quire publications. Any Unicode character is allowed, the only limitation, for less common characters, is whether the font you’re using includes it. When a font does not include a specific character, most browsers will substitute one from a different font.\n \u0026#40;c\u0026#41; will automatically render as ©.\n You can also use HTML tags in a Markdown file. This can be convenient for adding HTML elements that Markdown doesn’t support, or for applying special styling. For instance, by wrapping text with a \u0026lt;span\u0026gt; tag with a class in order to add custom styling. (See more about this in the Customizing Styles chapter of this guide.) Note, however, that you can’t do the same by wrapping multiple paragraphs of Markdown in \u0026lt;div\u0026gt;, \u0026lt;section\u0026gt; or other block-level tags. For this, you need the q-class shortcode. Read more about Quire shortcodes below.\n  Markdown Footnotes Footnotes can also be added with Markdown. Use a numbered marker like [^1] in the text where you want the number to go, and then at the end of the page, usually under a “Notes” heading, add the corresponding footnote:\n## Notes [^1]: The footnote itself is the same thing as the footnote number reference in the text, but with a colon followed by the footnote text Footnotes can also include Markdown formatting, including lists and even multiple paragraphs. For these, indent the content inwards two levels and put a line space in between the paragraphs just as you would elsewhere.\n## Notes [^2]: Footnotes with multiple paragraphs Are indented in twice, and have line breaks between. - Markdown lists - work like this in footnotes - as well The built-in Definition: Markdown ProcessorA Markdown processor parses Markdown code and generates the formatted text we get on the screen. will automatically renumber footnotes in the order they appear in the text. It will also always put the footnotes at the very end of your content, no matter where you may try to put them.  Definition: BlackfridayBlackfriday is the Markdown processor used by Hugo to render the formatted text of the publication. You can find technical details at: https://github.com/russross/blackfriday, the built in Markdown processor, will incorrectly also create link even if there is a space between the bracketed text and the parentheses. For instance, a footnote reference number [^1] followed by a space and any text in parentheses, will incorrectly format as a link: [^1] (Some aside text here). To avoid this, you can use the HTML entity reference, \u0026amp;#40;, for the first parentheses, or a backslash escape character before the first parentheses:\n[^1] \u0026amp;#40;Some aside text here) [^1] \\(Some aside text here)   Fractions, Superscripts and Subscripts The fractions 1\u0026#47;4, 1\u0026#47;2, and 3\u0026#47;4, will be automatically converted into proper, Unicode fractions (\u0026frac14;, \u0026frac12;, \u0026frac34;). Other Unicode fractions can also be used in Markdown directly, though note that not all fonts support the eighths in which case, browsers will render them with a default font. The fractions are: ¼, ½, ¾, ⅛, ⅜, ⅝, ⅞. Any others would need to be written using superscript and subscript formatting.\nWhile some Definition: Markdown ProcessorA Markdown processor parses Markdown code and generates the formatted text we get on the screen.s support superscript and subscript formatting with ^ and ~ characters, the one built into Quire does not. You’ll need to use the HTML \u0026lt;sup\u0026gt; and \u0026lt;sub\u0026gt; tags in your Markdown. For example:\n 19 × 24\u0026lt;sup\u0026gt;3\u0026lt;/sup\u0026gt;⁄\u0026lt;sub\u0026gt;16\u0026lt;/sub\u0026gt; inches = 19 × 243⁄16 inches 20\u0026lt;sup\u0026gt;th\u0026lt;/sup\u0026gt; Century Sculpture = 20th Century Sculpture Chrome yellow (PbCrO\u0026lt;sub\u0026gt;4\u0026lt;/sub\u0026gt;) = Chrome yellow (PbCrO4)  You will see a fractions attribute with a value of \u0026ldquo;false\u0026rdquo; in the config.yml file of your publication. Changing this to true will automatically render fraction-style superscript and subscript formatting for anything written as an integer followed by a slash and another integer. However, in many instances this will catch things that are not meant to be fractions. For this reason, we recommend leaving fractions set to false, and manually adding the necessary markup as it’s needed.\nMarkdown Preview Many text editors offer a preview function for Markdown, either pre-installed or as an add-on. In Atom for instance, a Markdown file can be previewed by selecting Packages \u0026gt; Markdown Preview \u0026gt; Toggle Preview (or just Shift-Control-M). The preview won’t match the style of your publication site, but will have default styling for headings, blockquotes, links and the like to allow you to confirm proper formatting.\nOutside of more code-driven text editors, there are also a growing number of Markdown-specific editors. Typora, for instance, offers a single-page live preview by displaying styled Markdown-formatted text as you type it.\nMarkdown Output Configuration Hugo has a built-in Markdown processor, Definition: BlackfridayBlackfriday is the Markdown processor used by Hugo to render the formatted text of the publication. You can find technical details at: https://github.com/russross/blackfriday (https://github.com/russross/blackfriday), which comes with some configuration options that can be applied in your project’s config.yml file. Details can be found in the Hugo documentation.\nBy default, in the config.yml file of your Quire project, Definition: BlackfridayBlackfriday is the Markdown processor used by Hugo to render the formatted text of the publication. You can find technical details at: https://github.com/russross/blackfriday\u0026rsquo;s fraction option has been set to false (text that looks like a fraction won’t be automatically formatted as such.), and the hrefTargetBlank option set to true (external links will open in new windows/tabs).\nMarkdown Resources This guide doesn’t cover all existing Markdown tags but there are some good sources that will help you find the right syntax to format your text. For example, the Programming Historian provides an introductory lesson to Markdown, and John Gruber, the creator of Markdown, provides a comprehensive explanation of the basics and syntax on his personal site Daring Fireball.\nBe aware of the multiple Markdown flavors out there and the fact that not all flavors are supported by Definition: BlackfridayBlackfriday is the Markdown processor used by Hugo to render the formatted text of the publication. You can find technical details at: https://github.com/russross/blackfriday.\nMicrosoft Word to Markdown Conversion Commonly, project content will start from Microsoft Word documents rather than being written originally in Markdown. In these cases, a simple file conversion using Definition: PandocAn open source, command-line text conversion tool. You can visit the Pandoc Demos page that lists the commands for the most frequent types of file conversion. can be done.\nThere are some easy things you can do in the Word document prior to conversion to ensure the best possible results:\n We recommend not to insert any images and media to the Word document before conversion. Headings must be formatted with Word styles instead of by changing font formats. -  While there are a number of free tools, we recommend using Definition: PandocAn open source, command-line text conversion tool. You can visit the Pandoc Demos page that lists the commands for the most frequent types of file conversion.. You can find installation instructions on their site.\nOnce installed, make sure you are in the folder where your .docx document is saved, and enter the Pandoc command on the command-line application. The command used to convert your file is: pandoc -s your_document_name.docx -t markdown -o your_document_name.md. However, in order to optimize the default conversion you should specify the following extensions:\n Quire needs Definition: ATX-style Markdown headersIt is the type of Markwdown headers that are used in Quire. It consists of one to six # signs and a line of text. For more details visit the Pandoc manual: https://pandoc.org/MANUAL.html#headers, these are specified adding --atx-headers to the command. The lines of the generated Definition: Markdown fileA file formatted in Markdown that generates a Web page. Markdown files have a YAML block at the top containing the metadata of the page. are 80 characters long. Adding the option --wrap=none to the command will override the default wrapping making easier to work with your files in the Definition: Text editorApplication used to edit text files containing either plain text and markup for rich text..  The order of the extensions doesn\u0026rsquo;t matter, and you can either type:\npandoc --atx-header --wrap=none -s your_document_name.docx -t markdown -o your_document_name.md\nor pandoc -s your_document_name.docx -t markdown --atx-header --wrap=none -o your_document_name.md\n","headings":["\u003ch2 id=\"yaml-syntax-basics\"\u003eYAML syntax basics\u003c/h2\u003e","\u003ch2 id=\"markdown-syntax-basics\"\u003eMarkdown syntax basics\u003c/h2\u003e","\u003ch3 id=\"basic-markdown-tags\"\u003eBasic Markdown Tags\u003c/h3\u003e","\u003ch2 id=\"heading-2\"\u003eHeading 2\u003c/h2\u003e","\u003ch3 id=\"heading-3\"\u003eHeading 3\u003c/h3\u003e","\u003ch2 id=\"markdown-formatting-gotchas\"\u003eMarkdown Formatting Gotchas\u003c/h2\u003e","\u003ch3 id=\"markdown-footnotes\"\u003eMarkdown Footnotes\u003c/h3\u003e","\u003ch3 id=\"fractions-superscripts-and-subscripts\"\u003eFractions, Superscripts and Subscripts\u003c/h3\u003e","\u003ch3 id=\"markdown-preview\"\u003eMarkdown Preview\u003c/h3\u003e","\u003ch3 id=\"markdown-output-configuration\"\u003eMarkdown Output Configuration\u003c/h3\u003e","\u003ch3 id=\"markdown-resources\"\u003eMarkdown Resources\u003c/h3\u003e","\u003ch3 id=\"microsoft-word-to-markdown-conversion\"\u003eMicrosoft Word to Markdown Conversion\u003c/h3\u003e"],"id":5,"length":1935,"title":"Fundamentals: YAML and Markdown","type":"essay","url":"https://gettypubs.github.io/quire/guide/fundamentals/"},{"content":" Structuring Your Publication The way you organize the pages Markdown files in the content directory of your project defines the structure of your publication. The names of the files will effect the final URLs of your publication as well as how the Table of Contents is organized. By default, URLs will be the filename, minus the .md suffix. Files nested in a sub-directory within content will include that sub-directory in the URL as well. So if your site is mypublication.com, these files:\n📄 cover.md📄 contents.md📁 part-one 📄 section-overview.md 📄 chapter-01.md 📄 chapter-02.md📁 part-two 📄 section-overview.md 📄 chapter-03.md Will map to these URLs:\nmypublication.com/cover/mypublication.com/contents/mypublication.com/part-one/section-overview/mypublication.com/part-one/chapter-01/mypublication.com/part-one/chapter-02/mypublication.com/part-two/section-overview/mypublication.com/part-two/chapter-03/ There are some important rules and tips to keep in mind, as well as further ways of refining and customizing the organization of your publication content:\n Filenames should be lowercase, with no spaces or special characters.\n Sub-directories can’t have other sub-directories within them.\n Don\u0026rsquo;t use index.md or _index.md files. For users with previous Hugo, static-site or other web development experience, you should not use index.md or _index.md files in your Quire project. _index.md is a Hugo convention for creating sections and nested sections, but in Quire it works against the linear ordering of the publication and breaks the Next and Previous page navigation. index.md is a web convention, but in Hugo, the presence of an index.md file in any directory converts that directory into a so-called “page bundle” in Hugo’s eyes and none of the other pages in that directory will be rendered.\n Create homepage and section landing pages with slug. index.md files would typically be used to create pages with URLs at the root level of the directory including the homepage of your site and sub-directories (like mypublication.com/ and mypublication.com/part-one/). Because index.md files can’t be used, you can instead define a slug attribute with a value of . (a period) in the page YAML of the page/file you want to use as a landing or homepage. You should add one slug attribute with a value of . per section. Read more about how to use slug to create section landing pages in the below section.\n Control page ordering with weight. In the example above, we’ve listed the files and directories in the order they would appear in the publication. When looking in the actual content directory, however, they will almost certainly not appear in the proper publication order, but rather more likely, they’d appear alphabetically. To control page ordering in Quire, define a weight attribute, with a numerical value, in the page YAML.\n  Defining Your Page’s Configuration and Metadata Every page in a Quire publication starts with a block of YAML (discussed further in the Publication Configuration \u0026amp; Metadata page of this guide). The three core attributes you’re probably going to define on every page are title, type, and weight. All page YAML, no matter how many attributes it has, goes between a set of three dashes, at the very top of the page.\n---title:type:weight:--- The page type must be one of nine possible values: page, essay, entry, cover, contents, about, search, or data. If left blank, or if any other value besides these nine is entered, the type will default to \u0026ldquo;page\u0026rdquo;. Read more about the specific types in the Defining Page Types section below.\nThe page weight is a number and will determine the order in which the page appears in the publication. The first page in your publication would be weight: 1 (don’t start with zero 0), the second would be weight: 2, and so on. Numbering should be unique, and sequential whole numbers, but it can skip numbers. So, if there’s no page with weight: 3, Quire will proceed to look for the next number. Intentionally skipping numbers in your sequence can be useful to leave room for adding content later. For example, your frontmatter might start at \u0026ldquo;0\u0026rdquo;, your first section might be \u0026ldquo;100\u0026rdquo;, second section \u0026ldquo;200\u0026rdquo; and so on. This makes it much easier to add a page to an early part of your publication, without renumbering every subsequent page.\nWhen you need to add more page information, the complete list of options is available in the \u0026ldquo;YAML\u0026rdquo; section of the guide.\nDefining Page Types Every page has one of the following nine types. If none is specified, Quire defaults to type: page.\npage: The default value. A general publication page. Used for introductions, forewords, chapters, appendices and other pages.\nessay: Meant to be a standalone, self-contained article in a periodical or collected volume. The essay page type will typically include the contributor names and potentially bios, its own bibliography, and an abstract. This is also reflected in the metadata embedded in the page as well, which will describe the page more specifically and with more page-specific information than a typical publication page, whose metadata will instead point to the publication as a whole.\nentry: An entry in a catalogue of objects. Typically includes a large, zoomable image of the object, with a table of object details and narrative text. You can learn more about entries in the Catalogues pageof this guide\ncover: The cover of your publications. Typically a full-screen splash page with large title, with cover description and publication information below. Along with defining type: cover, you will usually want to also add slug: . so that the cover page URL is the base URL of your site (your homepage). You can find more details about how to use slug in Creating section landing pages below.\ncontents: Automatically creates a table of contents for your entire publication, or for a section of your publication when used inside a sub-directory. The tocType can be set to either full or short in the publication’s config.yml file. The full option will typically list and link to all main pages, sections and section pages. The short option will list and link to main pages and sections only, not the pages within the section. The contents page type can also be customized with four classes: brief, list, abstract, or grid.\nabout: The about page will typically include the publication description, citation information, revision history, downloads and other formats, copyright and license information and more. This can be used also for a traditional copyright page for the PDF output format.\ndata: Description TK\nsearch: Description TK\nCreating Section Landing Pages A Quire publication can have sub-sections, created by nesting a group of one or more pages inside a sub-directory within the main content directory. It is recommended (though not required) to designate one of the pages in each sub-directory section to be the section landing page. To do so, add slug: . to the page YAML block. The slug attribute overrides the default name to be used in the URL for the page, and the period . refers it back to the sub-directory name. So, if in your site mypublication.com you have sub-directory called part-one and in that a landing page called landing-page.md, instead of the URL being mypublication.com/part-one/landing-page/, it would be mypublication.com/part-one/. Here’s the YAML:\ntitle:PartOnetype:contentsclass:gridslug:. The title of your defined landing page is what will be used in the header of that page, and in the Table of Contents and menu of your site.\nHowever, the filename of the sub-directory itself is also used in your publication; for the online navigation bar, and in the running page footers of the PDF version. In these two places, Quire takes the sub-directory filename and humanizes it, which means to change hyphens into spaces and capitalize with title case. So, the sub-directory part-one becomes “Part One”, or sculpture-of-the-renaissance becomes “Sculpture of the Renaissance.”\nDisplaying your Pages By default, every page you create will be included in all formats of your publication (online, PDF/print, and e-book) and will automatically be listed in the publication’s menu and Table of Contents. However, this can be overridden by setting any of the following attributes under display in the page YAML to false:\ndisplay:online:menu:pdf_ebook:toc: Note that when setting online: false, the page will not be included in the linear ordering of the book or in the menu, table of contents or search index, but it is still built. When deploying your site from the built files in the public/ directory, simply delete any unneeded ones. Read more about site deployment in the chapter on Multi-Format Output.  Formatting Text Content with Markdown The main content of your page appears after the YAML block at the top, and will be formatted in Markdown. Markdown is a very simple, plain text markup language that uses a few text rules to structure content for easy conversion into HTML. For example, a hash or pound sign at the beginning of a line makes a heading, and asterisks wrapping text turns it italic. You can learn more about Markdown syntax in the Markdown fundamentals section of this guide.\nApplying Types of Linking There are several types of linking that can be applied to text on your page. Stylization such as bolding, italics, underlining, and more can also be applied to linked text.\nExternal Links External links can be included through the following Markdown formatting:\n[Link text](http://www.linkaddress.com)[Getty Museum](http://www.getty.edu/museum/) Internal Links Between Pages Internal links between pages in your Quire publication can be included through the following Markdown formatting:\n[Link text](../nameofpage/)[Pea Pickers](../catalogue/2)More info in our [about](../about/) page. Internal Links Within a Page / Between Elements There are several types of linking between features, text, or objects on a single page that can be included through the following Markdown formatting:\n Callouts to figures (# are used for figures):\n This linking can be applied to a piece of text that when clicked upon will take a user to the location of the corresponding figure on the page. Figure IDs can be found on the figures.yml page as explained in the Figure Images section of this guide.  [number or name of figure](#figureid) [fig. 1](#1.1) Linking to other page elements (# is also used for other elements on the same page):\n The IDs for other elements can be found using the following method: Use the Inspect Element tool when right clicking a page or specific element. For Safari users, refer to this guide to enable this feature. In the page\u0026rsquo;s code certain elements will include a piece of code, id=\u0026quot;idnamehere\u0026quot; that designates the ID of that element. If the name of the element has a space that will be represented with a dash -. For example, the ID of a heading will often be the name of that heading.\n[referencetolink](#element-id)See [heading 1](#heading-1).  Linking to elements on a separate page\n Following the formula for internal links between pages, you can also specify an element on a separate page as a link destination.  [referencetolink](../nameofpage/#idname) See the introduction [notes](../introduction/#notes) Blackfriday, the built in Markdown processor, will incorrectly create link even if there is a space between the bracketed text and the parentheses when there is some text in brackets followed immediately by more text in parentheses. To avoid the linking, you can use a backslash escape character before the first parentheses.  Footnotes within a page, NOT bibliography or citations shortcodes:\n With this, a numbered footnote in the text when clicked upon will take a user to the corresponding area of the page where the full citation is located. The reverse is true from the linked number or arrow from the full citation. This requires two parts: Within the main body text, in a spot where you would like a footnote to be included will be set up as the following:  Example text.[^#] \u0026quot;A photographic study of use of leisure time in various income groups.\u0026quot;[^1]  At the end of the main body text, one can designate a “Notes” or related subheading using ## or ###. Underneath that heading the information of the citation will be listed using this format:  [^#]: Corresponding citation information. [^1]: Roy Stryker to all FSA (then RA) photographers, outline for first published in Carver, *Just Before the War*, n.p.  You can find additional information about formatting notes text with Markdown in the Markdown fundamentals section of this guide.  Citation and Bibliography shortcode linking:\n When the citation shortcode, {{\u0026lt; q-cite \u0026quot;author date\u0026quot; \u0026quot;page # if applicable\u0026quot; \u0026gt;}} is used in body of text, that corresponds to the short and full bibliographic information provided in the references.yml, an in-page bibliography will be generated. This linking is completed automatically. When the short code is used in the page the text will appear linked and when clicked upon will take a user to its corresponding bibliography entry on the same page. However, this cannot be done in reverse as the bibliography at the bottom of the page contains no links. For more information see the Citations \u0026amp; Bibliography section of this guide.   Using Shortcodes to Add Features Quire adds a number of specialty shortcodes which extend the functionality and possibilities of plain text markup. While Definition: HugoThe static site generator that powers Quire: https://gohugo.io/ has a number of built-in shortcodes, which can also work in Quire, Quire-specific shortcodes always start with a q.\nShortcodes are always formatted with a combination of curly brackets and angle brackets, with the name of the shortcode inside ({{\u0026lt; shortcode \u0026gt;}}) and often with some additional information in quotes. The example below inserts a figure in your document, matching a corresponding id with figure information stored in the publication’s figures.yml file.\n{{\u0026lt; q-figure id=\u0026#34;3.1\u0026#34; \u0026gt;}} While most Quire shortcodes work like q-figure as a single instance, some shortcodes act as wrappers around other text and so appear in pairs, with the second of the pair having a slash / preceding the shortcode name, much like you’d find in HTML markup.\n{{\u0026lt; q-class \u0026#34;backmatter\u0026#34; \u0026gt;}}Text goes here{{\u0026lt; /q-class \u0026gt;}} The following shortcode are (or will be) available in Quire. You’ll find more about them in their respective sections of the guide, as well as in the shortcodes api reference.\n q-class: Wrapping text in this shortcode will allow you to apply a class name to that block of text, which can then be used to apply custom css styles or interactions as needed. q-bibliography: Generates a bibliography from the entries in the project\u0026rsquo;s bibiliography.yml file. q-cite: Adds a linked Author Date citation reference to the text, and a hover pop-up with the full citation text. It also adds the citation to a map of cited works, which can then be output as a page-level bibliography on essay and entry type pages. q-contributors: Can be used to create a page of contributor biographies, a section of bios for a single page, a simple list of contributors, a byline for a particular page, or other similar outputs. q-figure: Inserts a formatted figure image (including audio and video) and caption using data from the project’s figures.yml file, or from values supplied directly in the shortcode. q-figure-group: Like q-figure, but with handling for multiple images at once. q-link-list: Creates an unordered list of links. Makes use of the link-list.html partial in the site templates.  ","headings":["\u003ch2 id=\"structuring-your-publication\"\u003eStructuring Your Publication\u003c/h2\u003e","\u003ch2 id=\"defining-your-page-s-configuration-and-metadata\"\u003eDefining Your Page’s Configuration and Metadata\u003c/h2\u003e","\u003ch2 id=\"defining-page-types\"\u003eDefining Page Types\u003c/h2\u003e","\u003ch2 id=\"creating-section-landing-pages\"\u003eCreating Section Landing Pages\u003c/h2\u003e","\u003ch2 id=\"displaying-your-pages\"\u003eDisplaying your Pages\u003c/h2\u003e","\u003ch2 id=\"formatting-text-content-with-markdown\"\u003eFormatting Text Content with Markdown\u003c/h2\u003e","\u003ch2 id=\"applying-types-of-linking\"\u003eApplying Types of Linking\u003c/h2\u003e","\u003ch3 id=\"external-links\"\u003eExternal Links\u003c/h3\u003e","\u003ch3 id=\"internal-links-between-pages\"\u003eInternal Links Between Pages\u003c/h3\u003e","\u003ch3 id=\"internal-links-within-a-page-between-elements\"\u003eInternal Links Within a Page / Between Elements\u003c/h3\u003e","\u003ch2 id=\"using-shortcodes-to-add-features\"\u003eUsing Shortcodes to Add Features\u003c/h2\u003e"],"id":6,"length":2477,"title":"Pages \u0026 Plain Text","type":"essay","url":"https://gettypubs.github.io/quire/guide/pages-plain-text/"},{"content":" Along with monographs, edited volumes and serial publications, Quire is also designed with the publication of museum collection catalogues in mind and has a specific page type for them (See all page types in the Defining Page Types section of the Pages and Plain Text page of this guide). Collection catalogues typically feature a page for each object, featuring images of the object, information about it, and an essay or entry text. To publish a catalogue with Quire, you’ll capture each object data, create the object pages, and then optionally, display a list of the objects included in your publication. Essays in object pages work in the same way as any other pages and you can visit our Markdown fundamentals page for reference.\nCapturing Object Data Much like figures.yml or references.yml, all catalogue object metadata should be captured in a single objects.yml file in the data directory of your project and then called as needed in different pages of your publication. Here is a brief sample:\nobject_display_order:-artist-year-dimensions-medium-locationobject_list:-id:2title:Impression,*Sunrise*artist:ClaudeMonetyear:1872medium:Oiloncanvasdimensions:48cm×63cm(18.9in×24.8in)location:MuséeMarmottanMonet,Parislink:figure:-id:\u0026#34;cat2\u0026#34;-id:3title:Reading(portraitofEdmaMorisot)artist:BertheMorisotyear:1873medium:Oilonfabricdimensions:74.2x100.3x12cm(293/16x391/2x411/16in.)location:ClevelandMuseumofArtlink:http://www.clevelandart.org/art/1950.89download:truefigure:-id:\u0026#34;cat3\u0026#34;-id:\u0026#34;cat3a\u0026#34;-id:\u0026#34;cat3b\u0026#34; There are two sections in the objects.yml file: object_list and object_display_order:\n The object_list is a list of the objects and their individual metadata attributes. With the exception of a few reserved terms, as noted in the table below, any attributes can be included here. These attributes and the associated values will ultimately display on the entry pages for each object.\n You control the specifics of which attributes to display and in what order, by listing them under object_display_order. Following the sample above, the attributes included on the pages would be: artist, year, dimensions, medium and location.\n  Any images of the object are also included here, under the figure attribute. This is a list of one or or more images. It is recommended that this list be only of id values corresponding with ids in your project’s figures.yml file. However, if you prefer, you can instead include a src attribute with the filename as it appears in your project’s image directory.\nHere are the only defined object attributes, you can include any others you like:\n   Attribute Description     id Required. Used to reference objects from entry pages. Should be numbers and lowercase letters only, with no spaces or special characters (001, fig-01a, etc).   figure A list of one or more images of the object. It is recommended that this list be only of id values corresponding with ids in your project’s figures.yml file.   link A URL link to a page with more/current information on the object. Usually the object in the museum’s online collection pages.   date_start, date_end Reserved for future use in Quire.   dimension_width, dimension_height, dimension_depth Reserved for future use in Quire.    Creating Object Pages Like all other pages in your publication, object pages are generated from the Markdown files in your content directory. To create an object entry page, give the page a type: entry in the page YAML block, and list one or more objects by id corresponding to those in your objects.yml file.\ntype:entryobject:-id:1 The page will feature any images associated with the object, followed by a table of object information and finally any essay/entry text included in the page Definition: Markdown fileA file formatted in Markdown that generates a Web page. Markdown files have a YAML block at the top containing the metadata of the page..\nscreenshot of catalogue entry page as rendered in the browser   If you add multiple figures of the object, these are displayed in a rotating carousel, in the order they are listed in the object information in objects.yml. If any of the object figures have a caption and/or credit, they will be included as a pop-up window. And if the figure’s download attribute is set to true, a download icon will be included as well.\nIn the table of object information, the items displayed and their titles are determined by the object_display_order attribute in the objects.yml file, as detailed in the section above. If the object information included a link, a “View in Collection” button is generated. The text of this button can be customized with the objectLinkText attribute in the project’s config.yml file.  Generating Object Lists/Grids In a collection catalogue, there will typically be a visual table of contents for just the catalogue entries. To create a page with a list or visual grid of all the object entries, the entries themselves need to be grouped in their own section. In Quire, this means putting them in a sub-directory within the main content directory (Read more about it in the Pages and Plain Text page of this guide).\nIn this example, inside the content directory, we have a folder called catalogue and inside that, three numbered entries and an overview page:\n📁 catalogue 📄 overview.md 📄 1.md 📄 2.md 📄 3.md The overview.md file is going to be our visual table of contents. To populate it, simply give it the attribute type a value of \u0026quot;contents\u0026quot; and the attribute class a value of \u0026quot;brief\u0026quot;, \u0026quot;list\u0026quot;, \u0026quot;abstract\u0026quot;, or \u0026quot;grid\u0026quot; to determine the style. (The \u0026quot;grid\u0026quot; option will include an image from each entry page.) This \u0026quot;contents\u0026quot; page type will automatically generate from each of the Markdown files in the folder.\ntitle:Cataloguetype:contentsclass:gridslug:. screenshot of catalogue grid page as rendered in the browser    The slug value in the sample above, will change the URL of the page. Instead of being /catalogue/overview it will be simply /catalogue. Read more about the function of slug in the Pages and Plain Text page of this guide.  ","headings":["\u003ch2 id=\"capturing-object-data\"\u003eCapturing Object Data\u003c/h2\u003e","\u003ch2 id=\"creating-object-pages\"\u003eCreating Object Pages\u003c/h2\u003e","\u003ch2 id=\"generating-object-lists-grids\"\u003eGenerating Object Lists/Grids\u003c/h2\u003e"],"id":7,"length":905,"title":"Collection Catalogues","type":"essay","url":"https://gettypubs.github.io/quire/guide/collection-catalogues/"},{"content":" Quire books are visual and the framework is built to support the use of images for scholarly purposes. In this page we explain where images are placed in the project and how you can manage them. We recommend using the figures.yml file to manage all the information about your images, and then inserting them into your Markdown documents where they are needed with the q-figure shortcode.\nIncluding Figure Image Files in Your Publication Figure image files should be placed in the static/img/ directory. It is defined in your project config.yml file with the parameter imageDir: \u0026quot;/img/\u0026quot; and the directory can be changed if needed.\n[Note] You can organize figures into sub-directories within the img folder, but you will need to include those directories along with the filename when defining the src attribute for the figure, as noted below.\nQuire does not require a specific image file format or size, but we have some recommended best practices:\n Use JPEG, PNG or GIF. Only include images at as big a size as most readers will need. 800px on the longest side is fine for most figures, up to 1200px on the longest side for modest zooming. We find these size also work well enough in print. Watch out for file sizes, especially on animated gifs which can get to be multiple megabytes quite quickly. Use Definition: Image OptimizationSet of techniques that compress image for the web. For more information about web image sizing and optimization, visit Google\u0026rsquo;s Web Fundamentals guide on Image Optimization https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/image-optimization#top_of_page. software when possible, and consider the total number of images on a given page when choosing sizes.  Creating a figures.yml File for Figure Image Metadata For most publications, or at least, those with more than just a handful of images, figures and all their associated attributes can be listed in the figures.yml file which should be placed in your data folder. These then can be called from wherever you need them in your project with a shortcode. See the API-DOCs section for complete details on possible figure attributes, but below there is a very simple example with id and src (required attributes) and alt (recommended attribute).\n-id:\u0026#34;1.1\u0026#34;src:\u0026#34;clyfford-still_untitled96.jpg\u0026#34;alt:\u0026#34;detail of painting showing jagged brushstrokes in browns and reds\u0026#34;-id:\u0026#34;1.2\u0026#34;src:\u0026#34;portrait-of-still.jpg\u0026#34;alt:\u0026#34;photograph of a frowning older man in brown jacket and fedora\u0026#34; Also available are the attributes caption, credit, media_id, media_type, aspect_ratio, and label_text.\n You can organize your images in the If your figures are organized in sub-directories within your static/img/ directory, they should appear as part of the file path under src, otherwise, only the filename is needed.   Inserting Figure Images the q-figure Shortcode Assuming each YAML figure entry in the figures.yml file includes a unique id (with a value in quotes: \u0026ldquo;1.1\u0026rdquo; not 1.1), you can insert a figure in your publication with only the id attribute in the shortcode, and all of the other attributes defined in the YAML for that figure, will be automatically included.\nFigure shortcodes should be inserted on their own line of your Markdown file, not within the text of a paragraph. A basic use of the q-figure shortcode would look like this:\n{{\u0026lt; q-figure id=\u0026#34;1.2\u0026#34; \u0026gt;}} If you include an attribute in the shortcode that is also in the figures.yml file, the figures.yml version is overridden. This can be useful when, for example, a figure is used in multiple locations and you want different captions.\n{{\u0026lt; q-figure id=\u0026#34;1.2\u0026#34; caption=\u0026#34;\u0026#34; \u0026gt;}}  Leaving an attribute blank, as in the caption example above, can also be used to display no caption at all, even if one is present in figures.yml. Attributes may be called within the shortcode in any order. {{\u0026lt; q-figure id=\u0026quot;1.2\u0026quot; caption=\u0026quot;\u0026quot; \u0026gt;}} is the same as {{\u0026lt; q-figure caption=\u0026quot;\u0026quot; id=\u0026quot;1.2\u0026quot; \u0026gt;}}.   Labeling Figure Images By default, all figure images are labeled automatically, either at the start of the caption, or just under the image itself in the case of a figure group with a single, group caption (see below). You can turn off this behavior in the config.yml file by switching the value figureLabels: true to figureLabels: false.\nFigure labels are constructed with the id of the image and the figureLabelsTextBefore figureLabelsTextAfter values defined in your config.yml file. For example if the id value is \u0026ldquo;12.3\u0026rdquo; and the figureLabelsTextBefore value is \u0026ldquo;Figure \u0026ldquo;, and figureLabelsTextAfter value is \u0026ldquo;. \u0026ldquo;, the resulting label would be \u0026ldquo;Figure 12.3\u0026rdquo;.\nTo customize the label text on a figure-by-figure basis, use the label_text attribute in the YAML attributes for your figure. Any text there will override the automatically constructed version.\nTo remove a label from a specific figure or a group of figures, add label=\u0026quot;false\u0026quot; to the shortcode. Or, in reverse, if you already have figureLabels: false set in your config.yml file, use label=\u0026quot;true\u0026quot; in the shortcode to show a label for that figure.\nStyling Figure Images Depending on your Definition: themeThemes define the overall style of your website. It determines the use of colors, layout elements, and text positioning., by default figures will appear at about the width of the full-column of text. Modifier classes can be added to a shortcode to style the way the figures appear. Available classes are is-pulled-left, is-pulled-right, is-large, and is-small. Classes are added just like other attributes in the shortcode.\n{{\u0026lt; q-figure id=\u0026#34;1.2\u0026#34; class=\u0026#34;is-pulled-left\u0026#34; \u0026gt;}}    Some themes may offer additional options, and styles may be edited and new styles added in any theme with Definition: CSSCascading Style Sheets or CSS is a stylesheet language used to describe the presentation of a document written in HTML or XML. Mozilla Developers provides a good guide to CSS: https://developer.mozilla.org/en-US/docs/Web/CSS.   Creating and Styling Figure Groups with the q-figure-group Shortcode If your project uses a figures.yml file, you can also create a group of figures by using the q-figure-group shortcode and simply including multiple, comma-separated values in the id field.\n{{\u0026lt; q-figure-group id=\u0026#34;1.1, 1.2\u0026#34; \u0026gt;}} In the above example, each figure’s caption will be included in the grouping. Alternatively, if you add a caption attribute directly in the shortcode, it will override those present in the figures.yml file and display with the group alone as a single, group caption.\n  Just as with the single q-figure shortcode, classes can be added to groups to style them. For example, to create a small group of images running along one side of your text.\n{{\u0026lt; q-figure-group class=\u0026#34;is-pulled-left\u0026#34; id=\u0026#34;1.1, 1.2\u0026#34; \u0026gt;}} In addition to all the attributes available to the q-figure shortcode, the q-figure-group extension also supports the grid attribute to specify a preferred grid width. In the below example, a grid=\u0026quot;2\u0026quot; is specified and so the gallery grid will be 2 images wide at your publication layout’s full-size. Alternately, if you specified grid=\u0026quot;4\u0026quot; the grid would be 4 images wide making each image relatively smaller.\n{{\u0026lt; q-figure-group grid=\u0026#34;2\u0026#34; id=\u0026#34;1.1, 1.2, 1.3, 1.4\u0026#34; \u0026gt;}}   Note that this is only a preferred grid width. With Quire’s responsively designed templates, the specific width of images is variable and their position relative to one another may also change depending on a reader’s device. For instance, on a large monitor, four images in a group may appear side-by-side in a row, whereas on a phone, they would most likely be in a 2 x 2 grid, or stack one on top of another. This responsiveness also means that group captions that use language like “From left to right” or \u0026ldquo;Clockwise from upper left,\u0026rdquo; will only be correct some of the time. To avoid this issue and ensure a clear reading experience across all devices and publication formats we recommend labeling figures individually.  Adding Video Figures Videos can be embedded in your publication the same way as other figure images, using either of the two figure shortcodes. The difference is in the figures.yml file where you’ll need to include a media_id and a media_type attribute for any video, along with an optional aspect_ratio attribute.\nQuire supports video embeds from either YouTube (media_type: youtube)or Vimeo (media_type: vimeo). The media_ids can be found in the URLs of the videos you wish to embed. For example, in https://www.youtube.com/watch?v=VYqDpNmnu8I or https://youtu.be/VYqDpNmnu8I, the media_id would be VYqDpNmnu8I; and in https://vimeo.com/221426899 it is 221426899.\n-id:1.5src:videostill.jpgmedia_id:VYqDpNmnu8Imedia_type:youtube The src image provided in this example is a frame from the video and will be used in place of the video in the PDF and EPUB versions of your publication. In Quire this is referred to as a fallback. Along with the fallback image, Quire will also automatically append a link to the video following the caption.\nLike the image labels this is controlled in the project’s config.yml file with videoFigureFallbackText: true, videoFigureFallbackTextBefore: \u0026quot;Watch the video at \u0026quot; and videoFigureFallbackTextAfter: \u0026quot;.\u0026quot;.\n Note that on YouTube, videos can be filed as “Unlisted” and this will let you embed the video, but will not include the video on your channel page, or in YouTube’s general search engine.  Adding Basic Figures If you are not using a figures.yml file, figures—including still images and animated gifs but not video—can be inserted in any Markdown document in your publication with the q-figure shortcode, where src is the name of your file as it appears in the static/img/ directory of your project.\n{{\u0026lt; q-figure src=\u0026#34;fig01.jpg\u0026#34; \u0026gt;}} Additionally, you can add caption, credit, class, and id attributes in this manner.\nUnless the figure is purely decorative, it should always also include an alternate textual description (alt) for the use of screen readers and other assistive technologies. We recommend using alternate textual description for accessibility purposes. For more information check our Accessibility Principles\n{{\u0026lt; q-figure src=\u0026#34;fig01.jpg\u0026#34; alt=\u0026#34;detail of painting showing diagonal brushstrokes in browns and reds\u0026#34; \u0026gt;}}","headings":["\u003ch2 id=\"including-figure-image-files-in-your-publication\"\u003eIncluding Figure Image Files in Your Publication\u003c/h2\u003e","\u003ch2 id=\"creating-a-figures-yml-file-for-figure-image-metadata\"\u003eCreating a \u003ccode\u003efigures.yml\u003c/code\u003e File for Figure Image Metadata\u003c/h2\u003e","\u003ch2 id=\"inserting-figure-images-the-q-figure-shortcode\"\u003eInserting Figure Images the \u003ccode\u003eq-figure\u003c/code\u003e Shortcode\u003c/h2\u003e","\u003ch2 id=\"labeling-figure-images\"\u003eLabeling Figure Images\u003c/h2\u003e","\u003ch2 id=\"styling-figure-images\"\u003eStyling Figure Images\u003c/h2\u003e","\u003ch2 id=\"creating-and-styling-figure-groups-with-the-q-figure-group-shortcode\"\u003eCreating and Styling Figure Groups with the \u003ccode\u003eq-figure-group\u003c/code\u003e Shortcode\u003c/h2\u003e","\u003ch2 id=\"adding-video-figures\"\u003eAdding Video Figures\u003c/h2\u003e","\u003ch2 id=\"adding-basic-figures\"\u003eAdding Basic Figures\u003c/h2\u003e"],"id":8,"length":1581,"title":"Figure Images","type":"essay","url":"https://gettypubs.github.io/quire/guide/figure-images/"},{"content":"TK\n","headings":null,"id":9,"length":1,"title":"Zooming Images \u0026 Maps","type":"essay","url":"https://gettypubs.github.io/quire/guide/zooming-images-maps/"},{"content":" In-text citations and bibliographies are all available in Quire. Designed to meet scholarly needs and multiple citation styles, they are easy to implement in your publications. While bibliographic references are formatted in YAML and stored in a YAML file (you can consult our YAML syntax fundamentals for more information), citation and bibliography shortcodes are used to integrate the references in your publication.\nCapturing Bibliographic Information in YAML Bibliographic references for your publication can be listed in a references.yml file in the data directory (along with the publication.yml, figures.yml and objects.yml files).\nEach entry in the references.yml file should include a short and a full form of the reference.\nentries:-short:\u0026#34;Faure 1909\u0026#34;full:\u0026#34;Faure, Élie. *Histoire de l’Art*. Vol. 1, *L’Art antique*. Paris: Gallimard, 1909\u0026#34;-short:\u0026#34;de Goncourt 1851\u0026#34;full:\u0026#34;de Goncourt, Edmond. *Journal des Goncourt: Mémoires de la vie littéraire.* Paris; G. Charpentier et cie, 1851.\u0026#34; These references can then be called individually from within text using the q-cite shortcode, or in their entirety as a generated bibliography using the q-bibliography shortcode. Both of which are detailed below.\nAdding Inline Text Citations The q-cite shortcode adds a linked Author Date citation reference to the text, and a hover pop-up with the full citation text. It also adds the citation to a list of all cited works on that page, which can be output as a page-level bibliography on pages with a type of \u0026quot;essay\u0026quot; and \u0026quot;entry\u0026quot;, as explained below.\n{{\u0026lt; q-cite \u0026#34;Faure 1909\u0026#34; \u0026#34;54\u0026#34; \u0026gt;}} The shortcode can be used anywhere in your Markdown text, including within footnotes. The first positional parameter is a short form citation that should match one in references.yml. The second, optional parameter is a page reference (if needed). The above sample would output as: “Faure 1909, 54”.\nThe text element between the author date reference and the page (in this case, a comma and a space) can be changed with the citationPageLocationDivider property in your publication’s config.yml file according to your preferred citation style.  Displaying a Bibliography Pages in your publication with a type of \u0026quot;essay\u0026quot; or \u0026quot;entry\u0026quot;, will automatically include a page-level bibliography listing all works that were cited on that page using the q-cite shortcode.\nHowever, to create a complete bibliography for your entire publication, from all the entries in the project\u0026rsquo;s references.yml file, you can use the q-bibliography shortcode. The resulting bibliography will be output in the order in which it appears in the references file.\n{{\u0026lt; q-bibliography \u0026gt;}} You may create one page in your publication where the bibliography will be displayed. All you need is to add the q-bibliography shortcode after the YAML block.  {{\u0026lt; q-bibliography sort=\u0026#34;short\u0026#34; \u0026gt;}} You may in some cases find that the system’s default sort method is sub-optimal. In particular, the sort is case sensitive and will sort uppercase, before lower. So a reference for “e.e. cummings” would be listed after those for “Emily Dickinson”. In these cases a custom key such as sort_as could be added to all entries in the references.yml file for fine-grained control.\nentries:-short:\u0026#34;cummings 1914\u0026#34;sort_as:\u0026#34;cummings-e-e\u0026#34;-short:\u0026#34;Dickinson 1932\u0026#34;sort_as:\u0026#34;dickinson-emily\u0026#34; This custom key would need to be added to all entries, not just the one that need to be sorted differently than the default.  Displaying the Short Reference in Bibliographies Bibliographies displayed on pages with a type of essay or entry, and those generated with the q-bibliography shortcode, can be just a list of the full version of the reference, or can include the short version as well. This is controlled globally (all bibliographies in the project have to be the same format) in the config.yml file with the displayBiblioShort property, can be set to \u0026quot;true\u0026quot; or \u0026quot;false\u0026quot;.\nAdditionally, to change the sort, the q-bibliography shortcode accepts an optional sort value, which will sort the list by whatever key from the entries is given. Often \u0026quot;short\u0026quot; or \u0026quot;full\u0026quot;.\n","headings":["\u003ch2 id=\"capturing-bibliographic-information-in-yaml\"\u003eCapturing Bibliographic Information in YAML\u003c/h2\u003e","\u003ch2 id=\"adding-inline-text-citations\"\u003eAdding Inline Text Citations\u003c/h2\u003e","\u003ch2 id=\"displaying-a-bibliography\"\u003eDisplaying a Bibliography\u003c/h2\u003e","\u003ch3 id=\"displaying-the-short-reference-in-bibliographies\"\u003eDisplaying the Short Reference in Bibliographies\u003c/h3\u003e"],"id":10,"length":625,"title":"Citations and Bibliographies","type":"essay","url":"https://gettypubs.github.io/quire/guide/citation-bibliographies/"},{"content":"TK\n","headings":null,"id":11,"length":1,"title":"Copright \u0026 About Pages","type":"essay","url":"https://gettypubs.github.io/quire/guide/copyright-about-pages/"},{"content":" Quire is designed to credit and add contributors to publications in a flexible way. Contributors data is stored in the publication.yml file of your project or in the YAML block of individual pages. The q-contributor shortcode offers multiple options to display contributors data in your publication.\nAdding Contributors to Your Project Contributors can be listed under contributor in your publication.yml file, or in the YAML block at the top of any page in your project for contributors specific to that page.\nEach contributor should have a type specified of either \u0026quot;primary\u0026quot;, \u0026quot;secondary\u0026quot;, or \u0026quot;project-team\u0026quot;.\n Primary contributors are authors, editors and others who would appear on a publication’s cover or title page. In Quire Definition: templateThemes may include one or more templates. Templates are the variety of layouts a theme has.s, they are typically used on the cover, the menu and in the metadata embedded in your publication; listed as the creators of the publication.\n Secondary contributors are not typically shown in the menu or cover, but are often included in book metadata, and may also be referenced by the q-contributor shortcode as noted below. In future iterations of Quire, we hope to be able to reference contributors listed here from individual pages.\n Project team contributors are those that worked on the publication (editors, designers, developers, and the like), and can be listed using the q-contributor shortcode, often on an About or Copyright page. Project team contributors are not otherwise included in publication metadata, or used in other Quire Definition: templateThemes may include one or more templates. Templates are the variety of layouts a theme has.s.\n  If your publication is a monograph you might add the main authors to the contributor attribute in publication.yml, while if the publication has essays written by different authors, these would be added to the contributor fields on each essay/page YAML block.  Wherever they are listed (publication.yml or pages YAML block), the following YAML attributes can be used for your contributors:\n-id:type:first_name:last_name:full_name:file_as:title:affiliation:role:role_code:pic:url:bio: Not all of these are required. Depending on your usage, you may need as little as first_name and last_name, or just full_name. See the q-contributor shortcode reference for details on each of the standard contributor attributes.\nContributors may also be listed in the contributor_as_it_appears field in your publication.yml file. This value will override the indivdual primary_contributors listed on the cover, the menu and in the book metadata. Useful when you want to include specific language about their role. For example: \u0026ldquo;Edited by Jane Smith and John Doe\u0026rdquo;.  Displaying a List of Contributors You can use the q-contributor shortcode to create a page of contributor biographies, a section of bios for a single page, a list of contributors, a byline for a particular page, or other similar applications. The shortcode requires both a \u0026quot;range\u0026quot; and a \u0026quot;type\u0026quot; value.\nSample: {{\u0026lt; q-contributors range=\u0026quot;page\u0026quot; type=\u0026quot;bio\u0026quot; \u0026gt;}}\nThe \u0026quot;range\u0026quot; value determines which contributors will be included in the list. Possible \u0026quot;range\u0026quot; values are:\n   Value Description     page Only the contributors listed for the page the shortcode appears on.   essays Contributors on any page in your publications with type: essay.   all All contributors.   primary Contributors listed under contributor in your publication.yml file, and with a type of \u0026quot;primary\u0026quot;.   secondary Contributors listed under contributor in your publication.yml file, and with a type of \u0026quot;secondary\u0026quot;.   project-team Contributors listed under contributor in your publication.yml file, and with a type of \u0026quot;project-team\u0026quot;.    The \u0026quot;type\u0026quot; value determines what information will be listed for each contributor in the \u0026quot;range\u0026quot;, and how it will be formatted. Possible \u0026quot;type\u0026quot; values are:\n   Value Description     initials Looks for the capital letters in a contributor first and last name and concatenates them together. Jane Pauley, becomes J.P.; Ralph Waldo Emerson becomes R.W.E.   name Just the first and last name.   name-plus The first and last name with, when available, their title and affiliation on a line below.   bio First and last name, with pic, url, and bio as available. Plus a link to their contribution.    There are some gotchas and limitations to the q-contributor shortcode:\n This shortcode can be used multiple times on a page, but ONLY if the same range is referenced.\n You can use a file_as value to control sort order. Otherwise lists are sorted alphabetically by last_name. If you wanted, for example, a list of essay contributors ordered in the way they are ordered in the page YAML block, you could assign a numeric file_as value to each (1, 2, 3 etc.). Note though that this file_as override will cary over to other uses of the shortcode. For example, a complete list of contributors at the end of a volume of collected papers.\n If a contributor is listed in many papers, the information in last listing will override all the others.\n Contributors with the same exact name will override each other. But using a file_as value would fix this (that value wouldn\u0026rsquo;t show up in the interface). For example, if there are two Jane Smiths, assigning a file_as value of \u0026ldquo;Smith, Jane 1\u0026rdquo; to one and \u0026ldquo;Smith, Jane 2\u0026rdquo; will sort them in that order, but their names would still be listed as Jane Smith.\n  ","headings":["\u003ch2 id=\"adding-contributors-to-your-project\"\u003eAdding Contributors to Your Project\u003c/h2\u003e","\u003ch2 id=\"displaying-a-list-of-contributors\"\u003eDisplaying a List of Contributors\u003c/h2\u003e"],"id":12,"length":846,"title":"Contributors","type":"essay","url":"https://gettypubs.github.io/quire/guide/contributors/"},{"content":" The look and feel of your Quire publication can be customized at four different levels of complexity: 1. changing style variables in the theme, 2. adding new style rules to the custom.css file, 3. overriding specific theme Definition: templateThemes may include one or more templates. Templates are the variety of layouts a theme has.s with your own custom version, or 4. creating an entirely new Quire theme.\nChanging the Style Variables in the Theme Every Quire project has a Definition: themeThemes define the overall style of your website. It determines the use of colors, layout elements, and text positioning. inside the themes directory. When you first start a new project typing the quire new command in your command line interface, the default theme included is quire-starter-theme. In it, you can access simple text Definition: VariableCSS variables are entities defined by CSS authors that contain specific values to be reused throughout a document. For more information about CSS variables visit: https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables.s that will let you update text and background colors, some element sizes, fonts, paragraph indents and more.\nTo find the variables, open the quire-starter-theme directory, navigate to the source sub-directory and then css, and open the file called variables.scss.\nscreenshot of the variables.scss file in the quire-starter-theme directory   The Definition: VariableCSS variables are entities defined by CSS authors that contain specific values to be reused throughout a document. For more information about CSS variables visit: https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables.s are prefixed with a dollar sign and are descriptive of what they control. For instance $quire-navbar-background-color is the background color of the navigation bar at the top of every page. To make it red, you could enter:\n$quire-navbar-background-color: red; Colors are expressed a number of different ways, none of which are better or more supported than the others, so you can use your preference. Most common are:\n The standard 140 Definition: Color KeywordsColor keywords are case-insensitive identifiers that represent specific colors. A comprehensive list of color keywords is at: https://www.w3.org/TR/SVG/types.html#ColorKeywords such as red, royalblue and honeydew The many possible Definition: HEX color valueHexadecimal color values that represent specific colors. Colors are specified by hexadecimal integers between 00 and FF. For more information visit: http://www.color-hex.com/s like #FF0000, #4169E1 and #F0FFF0 Definition: RGB Color ValuesThe RGB model define colors according to their red, green, and blue components by using hexadecimal and functional notations. An RGB color value calculator can be found at: https://www.w3schools.com/colors/colors_rgb.asp like rgb(255, 0, 0), rgb(65, 105, 225) and rgb(240, 255, 240)  The quire-starter-theme uses the Bulma CSS framework, so you can also use any Definition: Bulma variablesSass variables used by Bulma, an open source CSS framework. You can check a list of Bulma variables at: https://bulma.io/documentation/overview/variables/.\nYou must have the quire preview command running in your command line interface to see changes you make to the variables.scss file. You may also sometimes need to refresh your browser page, or even clear the browser cache to get the style changes to fully load.  Adding Custom Styles In your project’s static directory, there is a css directory with a blank custom.css file.\nscreenshot of the custom.css file in the static directory   Any Definition: CSSCascading Style Sheets or CSS is a stylesheet language used to describe the presentation of a document written in HTML or XML. Mozilla Developers provides a good guide to CSS: https://developer.mozilla.org/en-US/docs/Web/CSS you add here, will be added to your site’s styles. For example, let’s say you’d like a particular line of text in one of your Definition: Markdown fileA file formatted in Markdown that generates a Web page. Markdown files have a YAML block at the top containing the metadata of the page.s to be red. You could wrap that text in \u0026lt;span\u0026gt; HTML tags and give it a class.\n\u0026lt;span class=\u0026#34;red-text\u0026#34;\u0026gt;This text should be red\u0026lt;/span\u0026gt; And then in your custom.css file, add a style rule for that class:\n.red-text { color: red; } Custom Definition: CSSCascading Style Sheets or CSS is a stylesheet language used to describe the presentation of a document written in HTML or XML. Mozilla Developers provides a good guide to CSS: https://developer.mozilla.org/en-US/docs/Web/CSS like this can also be used in conjunction with the q-class shortcode. While you can add \u0026lt;span\u0026gt; HTML tags within lines and paragraphs of text, in Markdown you can’t do the same with \u0026lt;div\u0026gt; or \u0026lt;section\u0026gt; tags across multiple paragraphs. Instead, you can use the q-class shortcode to assign any class to all the Markdown within the opening and closing shortcode tags.\n{{\u0026lt; q-class \u0026#34;red-text\u0026#34; \u0026gt;}} This entire paragraph should be red. As should the paragraph after it. {{\u0026lt; /q-class \u0026gt;}} Styles added to the custom.css file will also override any existing styles already in use in your Definition: themeThemes define the overall style of your website. It determines the use of colors, layout elements, and text positioning.. For example, the following option would apply the style to any element with a Definition: classThe CSS class selector selects elements with a specific class attribute. The selector starts with a period . of \u0026quot;title\u0026quot; anywhere in your publication.\n.title { color: red; } To determine the selectors for any Definition: elementAn HTML element is an individual component of an HTML document or web page. Elements are defined by tags., in your browser of choice with your publication previewing, control-click (Mac) or right click (PC) on the element and select \u0026ldquo;Inspect element\u0026rdquo;. This will show you the HTML markup for your site, along with all the Definition: classThe CSS class selector selects elements with a specific class attribute. The selector starts with a period . names and elements, and even the styles that are currently being applied to that Definition: elementAn HTML element is an individual component of an HTML document or web page. Elements are defined by tags..\nThe more specific you can be with your Definition: CSS selectorCSS selectors are used to target the HTML elements on web pages. There are several CSS selectors available, being one of these the CSS Class Selector.s, the more likely the style will only be applied to the specific element you want. For example, if you wanted the page title on specific page to be a different color than the titles all the rest of the pages, you could determine the Definition: CSS selectorCSS selectors are used to target the HTML elements on web pages. There are several CSS selectors available, being one of these the CSS Class Selector. for that element on that page and apply a style rule to it without changing the styles on any other element or page. This example limits the style to the title in the page header of that one page:\n#chapter-one .quire-page__header .title { color: red; } In the above example, we are selecting the element with a Definition: classThe CSS class selector selects elements with a specific class attribute. The selector starts with a period . of \u0026quot;title\u0026quot; that is inside an element with the class of \u0026quot;quire-page__header\u0026quot; (both of which start with a period . to indicate Definition: classThe CSS class selector selects elements with a specific class attribute. The selector starts with a period .), that is inside an Definition: elementAn HTML element is an individual component of an HTML document or web page. Elements are defined by tags. (in this case an element representing the page itself) with an Definition: idIn an HTML document, the CSS ID selector matches an element based on the value of its id attribute. of \u0026quot;#chapter-one\u0026quot; (which starts with a hashmark to indicate id).\nIn Quire, page ids are unique, and can be found on the \u0026lt;div\u0026gt; element that has the Definition: classThe CSS class selector selects elements with a specific class attribute. The selector starts with a period . \u0026quot;quire-primary\u0026quot;. By using the Definition: idIn an HTML document, the CSS ID selector matches an element based on the value of its id attribute. in your custom Definition: CSSCascading Style Sheets or CSS is a stylesheet language used to describe the presentation of a document written in HTML or XML. Mozilla Developers provides a good guide to CSS: https://developer.mozilla.org/en-US/docs/Web/CSS, you are targeting only that page, not all \u0026quot;quire-primary\u0026quot; Definition: elementAn HTML element is an individual component of an HTML document or web page. Elements are defined by tags.s throughout your publication.  Exceptionally, if somewhere there is a more specific Definition: CSS selectorCSS selectors are used to target the HTML elements on web pages. There are several CSS selectors available, being one of these the CSS Class Selector. that’s applying a style to an element, it will override the less specific one even if it’s in your custom.css file. If you are trying to apply a more global style change like this and you find it’s not working, it may be because your Definition: CSS selectorCSS selectors are used to target the HTML elements on web pages. There are several CSS selectors available, being one of these the CSS Class Selector. is too generic and there is a more specific rule elsewhere in your theme’s styles that is overriding your more general one. The \u0026ldquo;Inspect element\u0026rdquo; tool will point to what combination of CSS selectors are actually applying the final style as it’s seen in the browser window.  Overriding Theme Templates Definition: CSSCascading Style Sheets or CSS is a stylesheet language used to describe the presentation of a document written in HTML or XML. Mozilla Developers provides a good guide to CSS: https://developer.mozilla.org/en-US/docs/Web/CSS changes like those mentioned above are best for re-styling existing elements. If though you’d like to make a more structural change, say, to rearrange elements on the page, or add new elements altogether, you’ll need to alter the Definition: templateThemes may include one or more templates. Templates are the variety of layouts a theme has. files that come in the Definition: themeThemes define the overall style of your website. It determines the use of colors, layout elements, and text positioning.. That said, other than changing the Definition: VariableCSS variables are entities defined by CSS authors that contain specific values to be reused throughout a document. For more information about CSS variables visit: https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables.s in variables.scss file, as described above, it’s usually best not to make other changes directly in the theme itself. By not doing so, it’s much easier to update your theme or switch out other themes later, not to mention easier to undo changes you’ve made.\nFor modest changes to the theme Definition: templateThemes may include one or more templates. Templates are the variety of layouts a theme has.s, we recommend creating new override files. Much like the custom.css file can be used to override styles in the project theme, you can also have files to override templates. There are none in the default starting project, so you’ll need to start be creating a new layouts directory folder in the main directory of your project. Any files you put in this layouts directory will override the corresponding files in the layouts directory of your theme. This includes page templates, partial templates and shortcodes.\nFor example, let’s say you want to customize the layout of all the pages in your project with the type of \u0026quot;essay\u0026quot;. In the theme layouts directory you’ll find that there’s a sub-directory called essay with a file in it called single.html. This is the template that controls the \u0026quot;essay\u0026quot; pages. You can see there’s a page header, an abstract the main content (.Content) of the Definition: Markdown fileA file formatted in Markdown that generates a Web page. Markdown files have a YAML block at the top containing the metadata of the page. and a page bibliography.\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;article class=\u0026#34;quire-page\u0026#34; id=\u0026#34;main\u0026#34; role=\u0026#34;main\u0026#34;\u0026gt; {{ partial \u0026#34;page-header.html\u0026#34; . }} {{ if .Params.abstract }} {{ partial \u0026#34;page-abstract.html\u0026#34; . }} {{ end }} \u0026lt;section id=\u0026#34;content\u0026#34; class=\u0026#34;section quire-page__content\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;content\u0026#34;\u0026gt; {{ .Content }} {{ partial \u0026#34;page-bibliography.html\u0026#34; . }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;/article\u0026gt; {{ end }} If you copy the essay sub-directory and its single.html file into the new layouts directory in your project’s main directory, this copy will override anything in the Definition: themeThemes define the overall style of your website. It determines the use of colors, layout elements, and text positioning.. So, if you delete the bibliography and rearrange the header and abstract in the copied file, that’s what Quire will use when building the site. It only changes the style of the header and abstract of your pages while the bibliography style remains intact.\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;article class=\u0026#34;quire-page\u0026#34; id=\u0026#34;main\u0026#34; role=\u0026#34;main\u0026#34;\u0026gt; {{ if .Params.abstract }} {{ partial \u0026#34;page-abstract.html\u0026#34; . }} {{ end }} {{ partial \u0026#34;page-header.html\u0026#34; . }} \u0026lt;section id=\u0026#34;content\u0026#34; class=\u0026#34;section quire-page__content\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;content\u0026#34;\u0026gt; {{ .Content }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;/article\u0026gt; {{ end }} By default, Quire has a number of pre-defined page types like \u0026quot;essay\u0026quot;, \u0026quot;entry\u0026quot;, and \u0026quot;cover\u0026quot;. To create a new page type, you would follow the model of the \u0026quot;essay\u0026quot; page type above, and create a directory with the name of the type and in that, have a file called single.html with the Definition: templateThemes may include one or more templates. Templates are the variety of layouts a theme has..\nWhether in the Definition: themeThemes define the overall style of your website. It determines the use of colors, layout elements, and text positioning. or in your project directory, all shortcodes go in the layouts directory and shortcodes sub-directory. The name of the shortcode file corresponds to the way the shortcode is called in the Definition: Markdown fileA file formatted in Markdown that generates a Web page. Markdown files have a YAML block at the top containing the metadata of the page.s. So q-figure.html is the shortcode {{\u0026lt; q-figure \u0026gt;}}.\nAnd if you make a mistake or change your mind later, you can simply delete the copy of the file and Quire will go back to using the original template as provided in the theme. This method can also be used to add completely new templates and even new shortcodes.\nCreating a New Quire Theme TK\nUpdating Your Theme to a Newer Version Before updating your Definition: themeThemes define the overall style of your website. It determines the use of colors, layout elements, and text positioning., make note of any changes you made to it as these will need to be manually copied over to the updated version of the theme if you want to keep them. Usually, this would only be changes to the style variables.\n In the theme repository on GitHub, use the “Clone or download” button to download a ZIP file of the most current version of the theme, or, go to the repository’s Releases page to choose a particular release.\n Once downloaded, unzip the package.\n In the themes folder of your Quire project, delete the existing folder there, and replace it with the one you just downloaded. The replacement folder must be named the same as the original.\n In your Definition: Command Line InterfaceCommand line interface or CLI is a text-based user interface for running tasks. In it, the user issues commands in the form of a text, navigate to your project folder and run the command quire install. This will install your theme’s dependencies.\n Once the install process is complete, manually copy over any changes/customizations to the theme that had made previously, and run quire preview to confirm.\n  You may also need to clear your browser cache to get the new theme stylesheets to reload.\nChanging to a New Theme  In the theme repository on GitHub, use the “Clone or download” button to download a ZIP file of the most current version of the theme, or, go to the repository’s Releases page to choose a particular release.\n Once downloaded, unzip the package.\n Add the new theme package to the themes folder of your Quire project. Leave the old theme there for now, until you confirm your new theme works and you are sure you want to use it.\n In your project’s config.yml file change the name listed under theme from \u0026quot;quire-starter-theme\u0026quot; to the name of the new theme.\n In your Definition: Command Line InterfaceCommand line interface or CLI is a text-based user interface for running tasks. In it, the user issues commands in the form of a text, navigate to your project folder and run the command quire install. This will install your theme’s dependencies.\n Once the install process is complete, run quire preview to confirm.\n  You may also need to clear your browser cache to get the new theme stylesheets to reload.\n","headings":["\u003ch2 id=\"changing-the-style-variables-in-the-theme\"\u003eChanging the Style Variables in the Theme\u003c/h2\u003e","\u003ch2 id=\"adding-custom-styles\"\u003eAdding Custom Styles\u003c/h2\u003e","\u003ch2 id=\"overriding-theme-templates\"\u003eOverriding Theme Templates\u003c/h2\u003e","\u003ch2 id=\"creating-a-new-quire-theme\"\u003eCreating a New Quire Theme\u003c/h2\u003e","\u003ch2 id=\"updating-your-theme-to-a-newer-version\"\u003eUpdating Your Theme to a Newer Version\u003c/h2\u003e","\u003ch2 id=\"changing-to-a-new-theme\"\u003eChanging to a New Theme\u003c/h2\u003e"],"id":13,"length":2730,"title":"Styles Customization","type":"essay","url":"https://gettypubs.github.io/quire/guide/styles-customization/"},{"content":" Typography is an important element of style in your Quire publication. Quire allows different levels of font customization, from using the already embedded open license fonts in the quire-starter-theme to adding new external fonts.\nCustomizing Fonts The quire-starter-theme includes three embedded, open license fonts: \u0026ldquo;Merriweather\u0026rdquo;, \u0026ldquo;Lato\u0026rdquo;, and \u0026ldquo;Aleo\u0026rdquo;. You can adjust which ones are used where in the \u0026ldquo;variables\u0026rdquo; file of your Definition: themeThemes define the overall style of your website. It determines the use of colors, layout elements, and text positioning., source/css/variables.scss:\n$serif: Merriweather, Georgia, serif; $sans-serif: Lato, Helvetica, sans-serif; $slab-serif: Aleo, Rockwell, \u0026#34;Trebuchet MS\u0026#34;, sans-serif; $family-primary: $serif; // body text: $serif, $sans-serif, $slab-serif  $family-secondary: $sans-serif; // headings and navigation items: $serif, $sans-serif, $slab-serif The $serif, $sans-serif and $slab-serif variables tell your publication what fonts to use. For example, the variable $serif: Merriweather, Georgia, serif; tells Quire to use \u0026ldquo;Merriweather\u0026rdquo; as serif font. \u0026ldquo;Georgia\u0026rdquo; and a generic \u0026ldquo;serif\u0026rdquo;, the comma-separated fonts declared after our custom font, are fallbacks in case the browser doesn’t load or support our custom one (in this case \u0026ldquo;Merriweather\u0026rdquo;). You want your fallbacks to be of the same basic type as your custom one, and go from most to least specific in the list. Read more about fallbacks and font-family usage on Mozilla’s web docs.\nThe variables $family-primary and $family-secondary tell your publication where to use the fonts you specify with the above variables. If the $family-primary font of your publication is $serif, \u0026ldquo;Merriweather\u0026rdquo; (and its fallback options) will be used in the body text of the publication pages.\nAdding a New Font Any font you add to your project should be under an open license, or you should have an explicit license to use it. While licensed fonts may offer variety, using them often means paying fees, and tracking usage. Additionally, if you are using GitHub to publicly share your Quire project, licensed fonts should never be included in your repository without also being listed on your .gitignore file, as this will expose the files to other users.  For open license fonts, Google Fonts is a great source, but other more artisanal options abound like the faces from the League of Moveable Type, or even the Cooper Hewitt’s own open source font. For more free fonts and for thoughtful ideas about their use, Jeremiah Shoaf’s The Definitive Guide to Free Fonts, is worth the purchase price.\nThe steps to adding new fonts to your publication are:\n1. Preparing Your Font Files and Adding Them to Your Project It’s recommended to include your font files in multiple file formats in order to increase browser compatibility. Ideally, you will have each of your fonts in the following formats: .eot, .woff2, .woff, and .ttf. If this is not the case, you can use a free webfont generator like the one from Font Squirrel to produce these various formats from a single source.\nAll the fonts you’d like to add should go in a folder named after the font, and all should be named consistently. We recommend the following format with lowercase and no spaces:\n📁 cooper-hewitt 📄 cooper-hewitt-bold.eot 📄 cooper-hewitt-bold.ttf 📄 cooper-hewitt-bold.woff 📄 cooper-hewitt-bold.woff2 📄 cooper-hewitt-bolditalic.eot 📄 cooper-hewitt-bolditalic.ttf 📄 cooper-hewitt-bolditalic.woff 📄 cooper-hewitt-bolditalic.woff2 In your themes/quire-starter-theme folder, all fonts are stored in source/fonts. Move your folder of fonts there.\nIf you are using GitHub, and this is a licensed font, or a font you don’t otherwise want available to anyone outside your project, add a line to your project’s .gitignore file to make sure the fonts are not added to the git record.\ncooper-hewitt  You will continue to have the fonts available in your local copy of your project, but anyone working on a clone or fork of your repository will have to manually add your font files to their local copy for them to appear in the project properly when they preview or build the site.\nWhen you ultimately host the final site on a web server, the fonts will be included in the built files and will need to be included in the package on the web server. Files hosted this way are not readibly accessible to non-technical users, but are still public. For another layer of protection, if it’s of a concern, font files could be assigned more generic names (ie., f1-bld.ttf instead of cooper-hewitt-bold.ttf). For complete protection of licensed/proprietary font files, other solutions should be sought.\n 2. Adding Font Information to Your Stylesheets Open the file source/css/fonts.scss. Each font in your font folder should have its own @font-face entry as the examples in this file demonstrate.\n@font-face { font-family: \u0026#34;Cooper Hewitt\u0026#34;; src: url(\u0026#34;../fonts/cooper-hewitt/cooper-hewitt-bold.eot\u0026#34;); src: url(\u0026#34;../fonts/cooper-hewitt/cooper-hewitt-bold.eot?#iefix\u0026#34;) format(\u0026#34;embedded-opentype\u0026#34;), url(\u0026#34;../fonts/cooper-hewitt/cooper-hewitt-bold.woff2\u0026#34;) format(\u0026#34;woff2\u0026#34;), url(\u0026#34;../fonts/cooper-hewitt/cooper-hewitt-bold.woff\u0026#34;) format(\u0026#34;woff\u0026#34;), url(\u0026#34;../fonts/cooper-hewitt/cooper-hewitt-bold.ttf\u0026#34;) format(\u0026#34;truetype\u0026#34;); font-weight: 700; font-style: normal; }  The font-family name is what you will use to call the font in your stylesheets. It is typically in title case, and can include spaces. The font-family name should be the same for all weights and styles of font you are adding. Meaning, all \u0026quot;\u0026quot;Cooper Hewitt\u0026quot;\u0026quot; not \u0026quot;\u0026quot;Cooper Hewitt\u0026quot; Bold\u0026quot; or \u0026quot;\u0026quot;Cooper Hewitt\u0026quot; Light Italic\u0026quot;.  The individual weights and styles are instead specified with the font-weight and font-style properties.\n The font-weight should be an integer set to match named weight of your font. Following the table below, a “Light” font would have a font-weight of 200. A “Bold” font would have a font-weight of 700.     font-weight Font name     100 Extra Light or Ultra Light   200 Light or Thin   300 Book or Demi   400 Normal or Regular   500 Medium   600 Semibold, Demibold   700 Bold   800 Black, Extra Bold or Heavy   900 Extra Black, Fat, Poster or Ultra Black     The font-style will be either normal or italic.  3. Using Your New Font With the font files included in the source/fonts folder, and all the matching @font-face entries saved to the source/css/fonts.scss file, you can now use your font anywhere in your site CSS with font-family.\nh1 { font-family: \u0026#34;Cooper Hewitt\u0026#34;; } Typically, you’ll want to change fonts across the project. For instance making all the main body copy a new font, or all the headings. This can be done in the source/css/variables.scss file that we describe in the Customizing fonts section:\nTo replace all $sans-serif uses with a new font:\n$sans-serif: \u0026#34;Cooper Hewitt\u0026#34;, Helvetica, sans-serif; Or to leave the existing $sans-serif and just make all the primary font be our new one:\n$family-primary: \u0026#34;Cooper Hewitt\u0026#34;, Helvetica, sans-serif; The rules about fallback fonts described in the Customizing fonts section above also apply to the new fonts.\n","headings":["\u003ch2 id=\"customizing-fonts\"\u003eCustomizing Fonts\u003c/h2\u003e","\u003ch2 id=\"adding-a-new-font\"\u003eAdding a New Font\u003c/h2\u003e","\u003ch3 id=\"1-preparing-your-font-files-and-adding-them-to-your-project\"\u003e1. Preparing Your Font Files and Adding Them to Your Project\u003c/h3\u003e","\u003ch3 id=\"2-adding-font-information-to-your-stylesheets\"\u003e2. Adding Font Information to Your Stylesheets\u003c/h3\u003e","\u003ch3 id=\"3-using-your-new-font\"\u003e3. Using Your New Font\u003c/h3\u003e"],"id":14,"length":1066,"title":"Fonts Customization","type":"essay","url":"https://gettypubs.github.io/quire/guide/fonts-customization/"},{"content":" Text to come.\nLicensing If the source files of your publication are hosted publicly on a site like GitHub, you should also include a LICENSE.md file to specifically define the terms of use for your files. A LICENSE.md file is not included by default in Quire projects, but we recommend looking at other Quire projects for samples. Typically the file will include license information for both the content and text content of your publication (Creative Commons), and also for the code (GNU Public, MIT, or others).\n","headings":["\u003ch2 id=\"licensing\"\u003eLicensing\u003c/h2\u003e"],"id":15,"length":86,"title":"Multiformat Output","type":"page","url":"https://gettypubs.github.io/quire/guide/multiformat-output/"},{"content":" Configuration Location: config.yml\nType: Object\n   Object Properties Expected Value Description     baseURL url The base url for your project.   blackfriday object Options for Blackfriday, Hugo’s markdown renderer. See below.   canonifyURLs boolean Converts all internal links to being in complete cannonical format. Default is false.   footnoteReturnLinkContents string Controls the appearance of the link added to the end of footnotes. Default is \u0026ldquo;↩\u0026rdquo;.   metaDataFormat \u0026ldquo;yaml\u0026rdquo;, \u0026ldquo;toml\u0026rdquo;, \u0026ldquo;json\u0026rdquo; Default is \u0026ldquo;yaml\u0026rdquo;   params object Additional parameters for Quire. See below.   relativeURLs boolean Keeps all internal links relative. Default is true.   theme url/id The name of the theme, in the theme directory you’re using. Quire starter kit default is quire-base-theme    See: Additional Hugo configuration options\nBlack Friday Markdown Location: blackfriday in config.yml\nType: Object\n   Object Properties Expected Value Description     fractions boolean When set to true any numbers separated by a slash are automatically converted to fractions. Default is false. Though even then \u0026frac14;, \u0026frac12; and \u0026frac34; are still converted. Recommend always using proper unicode fractions: ¼, ½, ¾, ⅛, ⅜, ⅝, ⅞.    See: Additional Blackfriday markdown configurations options\nQuire Parameters Location: params in config.yml\nType: Object\n   Object Properties Expected Value Description     displayBiblioShort boolean When true the short citation form (ie., \u0026ldquo;Smith 2003\u0026rdquo;) will be displayed with the full form, when creating a bibliography on pages with type: essay, or on other pages with the q-bibliography shortcode. Default is true.   citationPageLocationDivider string Default is \u0026ldquo;, \u0026ldquo;.   imageDir string The project’s main image directory inside the static directory. Default is \u0026ldquo;/img/\u0026rdquo;.   figureLabels boolean Default is true.   figureLabelsTextBefore string Default is \u0026ldquo;Figure \u0026ldquo;   figureLabelsTextAfter string Default is \u0026ldquo;. \u0026ldquo;   videoFigureFallbackText boolean Default is true.   videoFigureFallbackTextBefore string Default is \u0026ldquo;Watch the video at \u0026ldquo;   videoFigureFallbackTextAfter string Default is \u0026ldquo;.\u0026rdquo;   menuType \u0026ldquo;short\u0026rdquo;, \u0026ldquo;full\u0026rdquo; Default is \u0026ldquo;short\u0026rdquo;   searchEnabled boolean Default is true   tocType \u0026ldquo;short\u0026rdquo;, \u0026ldquo;full\u0026rdquo; Default is \u0026ldquo;full\u0026rdquo;    Publication Location: publication.yml\nType: Object\n   Object Properties Expected Value Description     title string The title of your publication.   subtitle string The subtitle of your publication.   short_title string A short version of your title, primarily for use in navigation elements with limited space.   reading_line string An additional title line for your publication.   url url The full URL of your final publication.   pub_type \u0026ldquo;book\u0026rdquo;, \u0026ldquo;journal-periodical\u0026rdquo;, \u0026ldquo;other\u0026rdquo; Can be one of three values. Determines how key search-engine metadata is defined.   pub-date YYYY-MM-DD The first date your publication will be released   language 2-letter ISO 639-1 language code(s) Taken from the the list at https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes. List multiple languages using a comma-separated list.   identifier object See below.   publisher array See below.   series_periodical_name string    series_issue_number string    contributor array See below.   contributor_as_it_appears string    promo_image url    description object See below.   subject array See below.   library_of_congress_cip_data list    copyright string    license object See below.   resource_links array See below.   revision_history array See below.   repository_url url A public repository of the source code and revision history for the publication.    Publisher Location: publisher in publication.yml\nType: Array\n   Item Attributes Expected Value Description     name string Name of the publisher   location string Publisher location, city.   url url Publisher homepage.    Description Location: description in publication.yml\nType: Object\n   Object Properties Expected Value Description     one_line string    full string    online string The online and pdf_ebook fields allow you to add additional text to the full description that is specific to either the online, or the PDF/EPUB/MOBI editions and will only show up there. For instance, in order to point to special features in one or the other of the formats.   pdf_ebook string     Subject Location: subject in publication.yml\nType: Array\n   Item Attributes Expected Value Description     type \u0026ldquo;keyword\u0026rdquo;, \u0026ldquo;bisac\u0026rdquo;, \u0026ldquo;getty\u0026rdquo;    name string    identifier string     License Location: license in publication.yml\nType: Object\n   Object Properties Expected Value Description     name string Name of the license.   abbreviation  If using a Creative Commons licenses, should match one of the seven available options: \u0026ldquo;CC0\u0026rdquo;, \u0026ldquo;CC BY\u0026rdquo;, \u0026ldquo;CC BY-SA\u0026rdquo;, \u0026ldquo;CC BY-ND\u0026rdquo;, \u0026ldquo;CC BY-NC\u0026rdquo;, \u0026ldquo;CC BY-NC-SA\u0026rdquo;, or \u0026ldquo;CC BY-NC-ND\u0026rdquo;.   url url Link to the license text.   icon url    scope \u0026ldquo;text-only\u0026rdquo;, \u0026ldquo;full\u0026rdquo;, \u0026ldquo;some-exceptions\u0026rdquo;    online_text string Markdown okay. Will override the automatically generated license text for the online edition only.   pdf_ebook_text string Markdown okay. Will override the automatically generated license text for the PDF and e-book editions only.    Resource Link Location: resource_link in publication.yml\nType: Array\n   Item Attributes Expected Value Description     name string How the link will be named.   type \u0026ldquo;other-format\u0026rdquo;, \u0026ldquo;related-resource\u0026rdquo;, \u0026ldquo;footer-link\u0026rdquo;    media_type string Taken from the list at https://www.iana.org/assignments/media-types/media-types.xhtml   link_relation string Taken from the list at http://www.iana.org/assignments/link-relations/link-relations.xhtml   url url URL to web resource or to download.   identifier object See below.   file_size_mb integer For downloads, file size in megabytes. Often appended to name in the interface, depending on your theme.   icon url     Revision History Location: revision_history in publication.yml\nType: Array\n   Item Attributes Expected Value Description     date YYYY-MM-DD    summary list     Identifier Location: identifier in top level of publication.yml, in any .Page.Params., or in any resource_link\nType: Object\n   Item Attributes Expected Value Description     isbn 10- or 13-digit ISBN For use with pub-type of \u0026ldquo;book\u0026rdquo;. ISBNs can be purchased indivudally or in packages at http://www.isbn.org/.   issn 8-digit ISSN For use with pub-type of \u0026ldquo;journal-periodical\u0026rdquo;. ISSNs can be requested through http://www.issn.org/.   doi string Not yet implemented.   uuid string Not yet implemented.    Contributor Location: contributor in publication.yml or in any .Page.Params.\nType: Array\n   Item Attributes Expected Value Description     id     type \u0026ldquo;primary\u0026rdquo;, \u0026ldquo;secondary\u0026rdquo;, \u0026ldquo;project-team\u0026rdquo;    first_name     last_name     full_name     file_as     title     affiliation     role     role_code 3-letter role code Taken from the list at https://www.loc.gov/marc/relators/relaterm.html   url     bio     pic      Figure Location: figure_list in figures.yml\nType: Array\n   Item Attributes Expected Value Description     id string Numbers and lowercase letters only, with no spaces or special characters (001, fig-01a, etc).   src url Should be the file name of a JPG, PNG or GIF image (fig01.jpg). Avoid using spaces or special characters, and if it’s in a sub-folder within the main imgdirectory (which is defined by the imageDir parameter in the config.yml file), it should include that sub-folder name as well (comparatives/fig01.jpg).   alt string For accessibility, all images should have alternative text descriptions. (Tips on crafting good alt text.) Only ever leave blank if the image is purely decorative.   caption string The caption to appear below the figure. Special characters are allowed. Use Markdown for formatting.   credit string Follows the caption. Markdown allowed.   media_type \u0026ldquo;youtube\u0026rdquo;, \u0026ldquo;vimeo\u0026rdquo; Currently supports video hosted on YouTube or Vimeo. (May eventually expand to HTML5 video, audio, and Soundcloud, and others.) When a media_type is defined, a media_id must be as well. For video, it is also recommended that an image src still be used (presumably being a screenshot from the video) so as to provide a fallback for PDF and EPUB output.   media_id string The ID of the video resource on YouTube or Vimeo. For example, in the URLs https://www.youtube.com/watch?v=VYqDpNmnu8I or https://youtu.be/VYqDpNmnu8I, the media_id would be VYqDpNmnu8I; and in https://vimeo.com/221426899 it is 221426899.   aspect_ratio \u0026ldquo;standard\u0026rdquo;, \u0026ldquo;widescreen\u0026rdquo; For use with video media_types to properly scale video embeds. When no value is provided, the default is \u0026ldquo;widescreen\u0026rdquo;.   label_text string Used for the q-figure-group shortcode only. A short text label added to the image, usually just under the image depending on your theme. If no text is provided here, a label is automatically generated from the provided id value along with the imageLabelContentBefore and imageLabelContentAfter values defined in your config.yml file.    Bibiliography Location: entries in references.yml\nType: Array\n   Item Attributes Expected Value Description     short string The short form of the citation, ie., Brown 1984.   full string The full form of the citation, ie.,    Object Location: object_list in objects.yml\nType: Array\n   Attribute Expected Value Description     id string Required. Used to reference objects from entry pages. Should be numbers and lowercase letters only, with no spaces or special characters (001, fig-01a, etc).   figure array A list of one or more images of the object. It is recommended that this list be only of id values corresponding with ids in your project’s figures.yml file.   link url A URL link to a page with more/current information on the object. Usually the object in the museum’s online collection pages.   date_start, date_end integer Reserved for future use in Quire.   dimension_width, dimension_height, dimension_depth integer Reserved for future use in Quire.    Objects also support arbitrary attributes, which might include title, artist, collection, etc. Those added will be output in a table on collection catalogue entry pages. The ordering of the display can be controlled with object_display_order in objects.yml.\nSee: Guide on Collection Catalogues\nPage Location: Any page in content/\nType: Object\n   Attribute Expected Value Description     number integer # for chapter/paper numbering.   title string    subtitle string    short_title string    type \u0026ldquo;page\u0026rdquo;\u0026lsquo;,\u0026rsquo; \u0026ldquo;essay\u0026rdquo;, \u0026ldquo;entry\u0026rdquo;, \u0026ldquo;cover\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;about\u0026rdquo;, \u0026ldquo;data\u0026rdquo;, \u0026ldquo;search\u0026rdquo;    class     weight integer    object array See above.   contributor array See above.   abstract string    slug     display \u0026ldquo;online\u0026rdquo;, \u0026ldquo;menu\u0026rdquo;, \u0026ldquo;pdf_ebook\u0026rdquo;, \u0026ldquo;toc\u0026rdquo;     The object and contributor attributes above are arrays of one or more items. The details of what YAML values each of those items can have, can be found in the Catalogue Entries and Contributors sections respectively.\n","headings":["\u003ch2 id=\"configuration\"\u003eConfiguration\u003c/h2\u003e","\u003ch3 id=\"black-friday-markdown\"\u003eBlack Friday Markdown\u003c/h3\u003e","\u003ch3 id=\"quire-parameters\"\u003eQuire Parameters\u003c/h3\u003e","\u003ch2 id=\"publication\"\u003ePublication\u003c/h2\u003e","\u003ch3 id=\"publisher\"\u003ePublisher\u003c/h3\u003e","\u003ch3 id=\"description\"\u003eDescription\u003c/h3\u003e","\u003ch3 id=\"subject\"\u003eSubject\u003c/h3\u003e","\u003ch3 id=\"license\"\u003eLicense\u003c/h3\u003e","\u003ch3 id=\"resource-link\"\u003eResource Link\u003c/h3\u003e","\u003ch3 id=\"revision-history\"\u003eRevision History\u003c/h3\u003e","\u003ch2 id=\"identifier\"\u003eIdentifier\u003c/h2\u003e","\u003ch2 id=\"contributor\"\u003eContributor\u003c/h2\u003e","\u003ch2 id=\"figure\"\u003eFigure\u003c/h2\u003e","\u003ch2 id=\"bibiliography\"\u003eBibiliography\u003c/h2\u003e","\u003ch2 id=\"object\"\u003eObject\u003c/h2\u003e","\u003ch2 id=\"page\"\u003ePage\u003c/h2\u003e"],"id":16,"length":1444,"title":"YAML","type":"essay","url":"https://gettypubs.github.io/quire/api-docs/yaml/"},{"content":" q-backmatter Sample: {{\u0026lt; q-backmatter \u0026gt;}}The text you want formatted here.{{\u0026lt; /q-backmatter \u0026gt;}}\nBasic Usage: Wrapping text in this shortcode will format it in a manner similar to how footnotes and bibliographies are formatted. Good for sections at the end of essays like Appendices, Acknowledgments, and Contributors Bios.\nParameters: None.\nYAML Dependencies: None.\nSee: Working with Text\nq-bibliography Basic Usage: Generates a bibiliography from the entries in the project\u0026rsquo;s bibiliography.yml file.\nSee: Citations \u0026amp; Bibliographies\nq-cite Basic Usage: Adds a linked Author Date citation reference to the text, and a hover pop-up with the full citation text. It also adds the citation to a map of cited works, which can then be output as a page-level bibliography on essay and entry type pages.\nSee: Citations \u0026amp; Bibliographies\nq-contributor Sample: {{\u0026lt; q-contributor range=\u0026quot;page\u0026quot; type=\u0026quot;bio\u0026quot; \u0026gt;}}\nBasic Usage: Can be used to create a page of contributor biographies, a section of bios for a single page, a simple list of contributors, a byline for a particular page, or other similar outputs.\nRequired Named Parameters: \u0026ldquo;range\u0026rdquo; and \u0026ldquo;type\u0026rdquo;\ntype    Expected Value Description     \u0026ldquo;initials\u0026rdquo; Looks for the capital letters in a contributor first and last name and concatenates them together.   \u0026ldquo;name\u0026rdquo; Just the first and last name.   \u0026ldquo;name-plus\u0026rdquo; The first and last name with, when available, their title and affiliation on a line below.   \u0026ldquo;bio\u0026rdquo; First and last name, with pic, url, and bio as available. Plus a link to their contribution.    range    Expected Value YAML Location Description     \u0026ldquo;page\u0026rdquo; .Page.Params.contributor In the current Page under contributor   \u0026ldquo;essays\u0026rdquo; .Site.Pages.Params.contributor In any Page with a type: essay under contributor   \u0026ldquo;all\u0026rdquo; .Site.Pages.Params.contributor In all Pages under contributor   \u0026ldquo;primary\u0026rdquo; .Site.Data.publication.contributor with a type of \u0026ldquo;primary\u0026rdquo; In publication.yml under contributor   \u0026ldquo;secondary\u0026rdquo; .Site.Data.publication.contributor with a type of \u0026ldquo;secondary\u0026rdquo; In publication.yml under contributor   \u0026ldquo;project-team\u0026rdquo; .Site.Data.publication.contributor with a type of \u0026ldquo;project-team\u0026rdquo; In publication.yml under contributor    YAML Structure:\n   YAML Attribute Required Notes     Either both first_name and last_name, OR full_name Y If all are included, full_name will override the others.   title N    affiliation N    role N When the shortcode range is \u0026ldquo;publication-team\u0026rdquo;, role is used in place of title   bio N Markdown okay   url N    pic N Filename only. File must be in the top level image director, or in a sub-directory defined in config.yml with contributorSubDir.    See: Contributors\nq-copyright Sample: {{\u0026lt; q-copyright \u0026gt;}}\nBasic Usage: Adds a copyright statement and licensing information as you’ve defined it in your publication.yml file. Commonly used on Copyright and About pages. The shortcode itself makes use of the copyright.html partial in your site templates.\nParameters: None.\nSee: Copyright \u0026amp; About Pages\nq-figure Sample: {{\u0026lt; q-figure id=\u0026quot;3.1\u0026quot; \u0026gt;}}\nBasic Usage: Inserts a formatted figure image, label, caption and credit line. If using a data/figures.yml file, only an id parameter is required for this shortcode. If other values supplied directly in the shortcode they will override any corresponding values in the data/figures.yml.\n   Named Parameters Expected Value Description     id string Spaces or special characters should not be used and will be stripped out. When used in a shortcode without a corresponding src parameter, the shortcode will look for a matching id in the project’s data/figures.yml file. When used in a shortcode with a corresponding src parameter, this will create an id for the image markup that can be used to link to the image directly (mypublication.com/chapter01/#fig-3) and ignores any potentially corresponding information in the data/figures.yml file.   src url Should be the file name of a JPG, PNG or GIF image (fig01.jpg). Avoid using spaces or special characters, and if it’s in a sub-folder within the main img directory (which is defined by the imageDir parameter in the config.yml file), it should include that sub-folder name as well (comparatives/fig01.jpg). If your project uses data/figures.yml file, you shouldn’t use a src parameter in the shortcode as it will override all other information.   alt string For accessibility, all images should have alternative text descriptions. (Tips on crafting good alt text.) Only ever leave blank if the image is purely decorative.   caption string The caption to appear below the figure. Special characters are allowed. Use Markdown for formatting.   credit string Follows the caption. Markdown allowed.   label boolean Default is set to true. true will add a label to the caption, such as \u0026ldquo;Figure 1.3\u0026rdquo;, false will remove the label. The global label setting is in the config.yml file under the parameter figureLabels.   label_text string Will override the default label text for the figure, which is otherwise constructed automatically with the figureLabelsTextBefore and figureLabelsTextAfter parameters in config.yml.   class is-pulled-right, is-pulled-left, is-full-width, is-centered-small Sets the style of the figure image.    See: Figure Images and Figure YAML\nq-figure-group Sample: {{\u0026lt; q-figure-group id=\u0026quot;3.1, 3.2, 3.3\u0026quot; \u0026gt;}}\nBasic Usage: Like q-figure, but with handling for multiple images at once.\n   Named Parameters Expected Value Description     id string One or more comma-separated ids that match corresponding values in the project’s data/figures.yml file.   caption string The caption to appear below the figure group. Special characters are allowed. Use Markdown for formatting. Overrides any caption information provided in data/figures.yml.   credit string Follows the caption. Markdown allowed. Overrides any caption information provided in data/figures.yml.   label boolean Default is set to true. true will add a label to the caption, such as \u0026ldquo;Figure 1.3\u0026rdquo;, false will remove the label. The global label setting is in the config.yml file under the parameter figureLabels. If a caption is also provided in the shortcode, the labels will be applied on their own directly under each image in the group, rather than as part of the caption.   class is-pulled-right, is-pulled-left, is-full-width, is-centered-small Sets the style of the group of figures overall.   grid 1, 2, 3, 4, 5, 6 Determines the horizontal width (in number of images) of the image grid. If no grid is set, the images will stack on top of one another vertically.    See: Figure Images and Figure YAML\nq-link-list Sample: {{\u0026lt; q-link-list \u0026quot;other-formats\u0026quot; \u0026gt;}}\nBasic Usage: Creates an unordered list of links. Makes use of the link-list.html partial in the site templates.\nParameters:\n   Parameter Position Expected Value Description     0 * \u0026ldquo;other-formats\u0026rdquo;, \u0026ldquo;related-resources\u0026rdquo; Values point to corresponding values in publication.yml    Parameters are not named, but instead defined by their position, starting at 0.\nSee: Copyright \u0026amp; About Pages\nq-loc Sample: {{\u0026lt; q-loc \u0026gt;}}\nBasic Usage: Adds formatted Library of Congress Cataloging-in-Publication Data to the page, from values in publication.yml.\nParameters: None\nSee: Copyright \u0026amp; About Pages\nq-publisher-team Note: this should be folded into the q-contributor.\nq-revision-history Sample: {{\u0026lt; q-revision-history \u0026gt;}}\nBasic Usage: Adds a revision history to the page, based on values in publication.yml.\n   Named Parameters Expected Value Description     format \u0026ldquo;short\u0026rdquo;, \u0026ldquo;full\u0026rdquo; \u0026ldquo;short\u0026rdquo; will show only the first publication date and most recently updated date. \u0026ldquo;long\u0026rdquo; shows all dates and list of changes for each.    See: Copyright \u0026amp; About Pages\nq-table Note: Original version of this was tabled. Still looking for better solution for complex tables.\nSee: Figures\nq-url-link Note: Not sure we‘ll do this. Might be better to build in with JS rather than have a separate shortcode just for URLs.\nSee: Working with Text\n","headings":["\u003ch2 id=\"q-backmatter\"\u003e\u003ccode\u003eq-backmatter\u003c/code\u003e\u003c/h2\u003e","\u003ch2 id=\"q-bibliography\"\u003e\u003ccode\u003eq-bibliography\u003c/code\u003e\u003c/h2\u003e","\u003ch2 id=\"q-cite\"\u003e\u003ccode\u003eq-cite\u003c/code\u003e\u003c/h2\u003e","\u003ch2 id=\"q-contributor\"\u003e\u003ccode\u003eq-contributor\u003c/code\u003e\u003c/h2\u003e","\u003ch3 id=\"type\"\u003etype\u003c/h3\u003e","\u003ch3 id=\"range\"\u003erange\u003c/h3\u003e","\u003ch2 id=\"q-copyright\"\u003e\u003ccode\u003eq-copyright\u003c/code\u003e\u003c/h2\u003e","\u003ch2 id=\"q-figure\"\u003e\u003ccode\u003eq-figure\u003c/code\u003e\u003c/h2\u003e","\u003ch2 id=\"q-figure-group\"\u003e\u003ccode\u003eq-figure-group\u003c/code\u003e\u003c/h2\u003e","\u003ch2 id=\"q-link-list\"\u003e\u003ccode\u003eq-link-list\u003c/code\u003e\u003c/h2\u003e","\u003ch2 id=\"q-loc\"\u003e\u003ccode\u003eq-loc\u003c/code\u003e\u003c/h2\u003e","\u003ch2 id=\"q-publisher-team\"\u003e\u003ccode\u003eq-publisher-team\u003c/code\u003e\u003c/h2\u003e","\u003ch2 id=\"q-revision-history\"\u003e\u003ccode\u003eq-revision-history\u003c/code\u003e\u003c/h2\u003e","\u003ch2 id=\"q-table\"\u003e\u003ccode\u003eq-table\u003c/code\u003e\u003c/h2\u003e","\u003ch2 id=\"q-url-link\"\u003e\u003ccode\u003eq-url-link\u003c/code\u003e\u003c/h2\u003e"],"id":17,"length":1158,"title":"Shortcodes","type":"essay","url":"https://gettypubs.github.io/quire/api-docs/shortcodes/"},{"content":" Each Quire project relies on two projects the quire-cli a command line interface (cli) to run commands to preview and build a static website, a PDF or an EPUB and the quire-starter-theme a front end development toolkit that allows users to shape the output of the website, PDF and EPUB. This page explains what makes these two projects work and what major dependencies currently make quire what it is.\n    Hugo is a static HTML and CSS website generator written in Go. It is optimized for speed, ease of use, and configurability. Hugo takes a directory with content and templates and renders them into a full HTML website. Hugo relies on Markdown files with front matter for metadata, and you can run Hugo from any directory. This works well for shared hosts and other systems where you don’t have a privileged account.\n Quire makes use of Hugo via the npm package hugo-bin\nQuire uses Hugo’s cli, templating system and http server. to create a way to preview your site while editing the front end code, build a static html site and aids Prince XML to create a PDF of your publication you are building.\n    Prince can also be used by authors and publishers to typeset and print documents written in HTML, XHTML, or one of the many XML-based document formats. Prince is capable of formatting academic papers, journals, magazines, and books.\n Quire uses the output of Hugo static-site generator to build a PDF as referenced above.\n    At its core, webpack is a static module bundler for modern JavaScript applications. When webpack processes your application, it internally builds a dependency graph which maps every module your project needs and generates one or more bundles.\n Quire makes use of Webpack via the npm package webpack\nCurrently Quire starter theme uses the latest version of Webpack 4 to bundle front end assets and support the development workflow.\nTo modify the Webpack configuration for your project edit this file\n\u0026lt;your-project-directory\u0026gt;/themes/quire-starter-theme/webpack.config.js\npe-epub and pe-epub-fs  \u0026ldquo;pee pub\u0026rdquo; makes epubs better. Our goal is to make it as easy as possible to output a valid epub. It\u0026rsquo;s used in production over at The People\u0026rsquo;s E-Book. pe-epub-fs extends pe-epub so you can import local assets from your filesystem rather than from the web.\n Quire uses these projects to generate the EPUB file. This file can be access on any device or software that reads the .epub file format. These projects generate a mostly style stripped version of the publication. These projects have been receiving limited maintenance. Quire is currently seeking a replacement to output the EPUB file.\nQuire Dependency Tables CLI Dependencies    Dependency NPM Description     axios Promise based HTTP client for the browser and node.js   chalk Terminal string styling done right   cheerio Fast, flexible \u0026amp; lean implementation of core jQuery designed specifically for the server.   command-exists node module to check if a command-line command exists   commander The complete solution for node.js command-line interfaces, inspired by Ruby\u0026rsquo;s commander.   execa A better child_process   glob Match files using the patterns the shell uses, like stars and stuff.   hugo-bin Binary wrapper for Hugo   js-yaml YAML 1.2 parser / writer for JavaScript   lodash The Lodash library exported as Node.js modules.   [pe-epub]() Makes epubs better.   [pe-epub-fs]() Extends pe-epub so you can import local assets from your filesystem rather than from the web   rimraf The UNIX command rm -rf for node.   striptags An implementation of PHP\u0026rsquo;s strip_tags in Node.js.   webpack webpack is a module bundler   yaml-front-matter Parses yaml or json at the front of a string. Places the parsed content, plus the rest of the string content, into an object literal.    CLI Dev Dependencies    Dependency NPM Description     elint ESLint is a tool for identifying and reporting on patterns found in ECMAScript/JavaScript code.   eslint-config-standard Shareable configs are designed to work with the extends feature of .eslintrc files. You can learn more about Shareable Configs on the official ESLint website.   eslint-plugin-promise Enforce best practices for JavaScript promises.   eslint-plugin-standard ESlint Rules for the Standard Linter   jsdoc An API documentation generator for JavaScript.   jsdoc-template-argon Template System for jsdoc   mocha Simple, flexible, fun JavaScript test framework for Node.js \u0026amp; The Browser   tmp A simple temporary file and directory creator for node.js.    Starter Theme Dependencies    Dependency NPM Description     bulma Bulma is a CSS framework. There is no JavaScript included.   hammerjs Hammer is a open-source library that can recognize gestures made by touch, mouse and pointerEvents   jquery jQuery is a fast, small, and feature-rich JavaScript library.   leaflet Leaflet is the leading open-source JavaScript library for mobile-friendly interactive maps.   lodash lodash is a fast, small, and feature-rich JavaScript library.   lunr A bit like Solr, but much smaller and not as bright.   smoothstate smoothState.js is a jQuery plugin that progressively enhances page loads to give us control over page transitions.   template-polyfill A polyfill for the HTML5 \u0026lt;template\u0026gt; tag.   velocity-animate Velocity is an animation engine with the same API as jQuery\u0026rsquo;s $.animate().    Starter Theme Dev Dependencies    Dependency NPM Description     babel-loader This package allows transpiling JavaScript files using Babel and webpack.   clean-webpack-plugin A webpack plugin to remove/clean your build folder(s) before building.   css-loader The css-loader interprets @import and url() like import/require() and will resolve them.   eslint ESLint is a tool for identifying and reporting on patterns found in ECMAScript/JavaScript code.   extract-text-webpack-plugin Extract text from a bundle, or bundles, into a separate file.   file-loader Instructs webpack to emit the required object as file and to return its public URL   glob Match files using the patterns the shell uses, like stars and stuff.   node-sass Node-sass is a library that provides binding for Node.js to LibSass, the C version of the popular stylesheet preprocessor, Sass.   purify-css A function that takes content (HTML/JS/PHP/etc) and CSS, and returns only the used CSS.   purifycss-webpack This plugin uses PurifyCSS to remove unused selectors from your CSS. You should use it with the extract-text-webpack-plugin.   sass-loader Loads a Sass/SCSS file and compiles it to CSS.   style-loader Adds CSS to the DOM by injecting a \u0026lt;style\u0026gt; tag   uglifyjs-webpack-plugin This plugin uses UglifyJS v3 (uglify-es) to minify your JavaScript   webpack webpack is a module bundler   url-loader Loads files as base64 encoded URL    ","headings":["\u003ch3 id=\"pe-epub-https-github-com-peoples-e-pe-epub-and-pe-epub-fs-https-github-com-peoples-e-pe-epub-fs\"\u003e\u003ca href=\"https://github.com/peoples-e/pe-epub\" target=\"_blank\"\u003epe-epub\u003c/a\u003e and \u003ca href=\"https://github.com/peoples-e/pe-epub-fs\" target=\"_blank\"\u003epe-epub-fs\u003c/a\u003e\u003c/h3\u003e","\u003ch2 id=\"quire-dependency-tables\"\u003eQuire Dependency Tables\u003c/h2\u003e","\u003ch3 id=\"cli-dependencies\"\u003eCLI Dependencies\u003c/h3\u003e","\u003ch3 id=\"cli-dev-dependencies\"\u003eCLI Dev Dependencies\u003c/h3\u003e","\u003ch3 id=\"starter-theme-dependencies\"\u003eStarter Theme Dependencies\u003c/h3\u003e","\u003ch3 id=\"starter-theme-dev-dependencies\"\u003eStarter Theme Dev Dependencies\u003c/h3\u003e"],"id":18,"length":1004,"title":"Dependency Guide","type":"essay","url":"https://gettypubs.github.io/quire/api-docs/dependency-guide/"},{"content":" Markdown Paragraphs are made by adding two hard returns. When working in a text editor, depending on your configuration and the source of your text, lines might have hard breaks, or might all flow together. This is seen in the example below where the first paragraph has hard breaks and the second does not. In Markdwon, these will both render as single paragraphs with no hard breaks. The only way to add a hard break in markdown is with the HTML break (\u0026lt;br /\u0026gt;) element.\nLorem ipsum dolor sit amet, consecteturadipiscing elit, sed do eiusmod temporincididunt ut labore et dolore magna aliqua.Ut enim ad minim veniam, quis nostrudexercitation ullamco laboris nisi utaliquip ex ea commodo consequat.Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Other typical Markdown formatting is listed below. Note that the spacing after the #, \u0026gt;, - and list numerals is necessary.\n# Heading 1 ## Heading 2 ### Heading 3 #### Heading 4 *Italic Text* **Bold Text**\u0026gt; Blockquote [Link Text](http://www.linkadress.com) - dashes make- a list with- bullets - indenting - makes - sub-lists 1. numbers make2. a list with3. numbers YAML In a Quire publication, anything that could be considered data, is written in a plain-text data format called YAML.\n YAML is used for configuring how Quire works and for providing metadata about your publication in files with the extension .yml (both topics covered in Publication Configuration \u0026amp; Metadata).\n .yml files are also used for storing information about figures, bibliographic references, and art objects.\n In individual pages or chapters within the publication, written in Markdown and with a .md extension, there is a YAML block that contains the page metadata. For example the YAML block for the page you’re on right now is:\n  ---title:Cheatsheettype:page--- YAML item:other_item:multiple_items:-item_name:item_description:-item_name:item_description:item:\u0026#34;If the text here has a colon : or other special characters it should be surrounded in double quotes\u0026#34;item:| Using a pipe character, and then dropping down a line and indenting like this allows you to include multiple paragraphs, just as you would in Markdown. Not all Quire YAML attributes expect Markdown though, so check the docs. - Markdown style lists - and other formatting are - also allowed YAML Lint Code Beautify validator\nShortcodes {{\u0026lt; q-figure id=\u0026#34;##\u0026#34; \u0026gt;}} {{\u0026lt; q-figure-group id=\u0026#34;##, ##, ##\u0026#34; \u0026gt;}} {{\u0026lt; q-cite \u0026#34;Lastname YYYY\u0026#34; \u0026gt;}} {{\u0026lt; q-bibliography \u0026gt;}} {{\u0026lt; q-contributors range=\u0026#34;xxxx\u0026#34; type=\u0026#34;xxxx\u0026#34; \u0026gt;}}","headings":["\u003ch2 id=\"markdown\"\u003eMarkdown\u003c/h2\u003e","\u003ch2 id=\"yaml\"\u003eYAML\u003c/h2\u003e","\u003ch3 id=\"yaml-1\"\u003eYAML\u003c/h3\u003e","\u003ch2 id=\"shortcodes\"\u003eShortcodes\u003c/h2\u003e"],"id":19,"length":414,"title":"Quire Cheatsheet","type":"essay","url":"https://gettypubs.github.io/quire/resources/cheatsheet/"},{"content":" Default Style Guide for Quire Markdown markdown style guide with code   Visual Output in Quire  visual output style guide in quire    ","headings":["\u003ch2 id=\"markdown\"\u003eMarkdown\u003c/h2\u003e","\u003ch2 id=\"visual-output-in-quire\"\u003eVisual Output in Quire\u003c/h2\u003e"],"id":20,"length":21,"title":"Default Styleguide","type":"essay","url":"https://gettypubs.github.io/quire/resources/default-styleguide/"},{"content":"Quire CLI, or command line interface, (quire-cli) is the control for creating, previewing and outputting Quire projects. It is written in JavaScript and requires Node.js to run. Quire CLI is typically run from Terminal on a Mac, and Git Bash (or its equivalent) on a PC. The following commands are available\nThe full Quire CLI system is not currently available to PC users. However, PC users can still start and work on Quire projects, preview the online edition, and output final files for it, by installing and using Hugo directly (the static-site software underlying Quire). They will not, however, be able to: Output PDF or EPUB editions, or make changes to Style (.scss) or Javascript (.js) files inside the themes folder. More information can be found in the PC installation instructions. Corresponding commands are included in the table below.\n   Command PC Option Description     quire -V or quire --version hugo version Output the version number.   quire -h or quire --help hugo -h or hugo --help Output usage information.   quire new project-name n/a Create a new Quire project named project-name in the current directory. Name can be anything, but shouldn’t contain spaces.   quire preview hugo server Run a local server to preview the project in a browser. Defaults to previewing at http://localhost:1313/, but will use other port numbers (such as http://localhost:6532/) if 1313 is busy. The specific address will be listed in your command line terminal after running the command.   quire build hugo Build the files of the current project into the public directory. These can then be hosted on any web server.   quire pdf n/a Generate a PDF version of the current project.   quire epub n/a Generate an EPUB version of the current project.   quire install n/a Install this project\u0026rsquo;s theme dependencies.   quire debug n/a Development use only. Log info about current project.    ","headings":null,"id":21,"length":302,"title":"Quire CLI Instructions","type":"essay","url":"https://gettypubs.github.io/quire/resources/quire-cli-instructions/"},{"content":" Hosting Your Project Code on GitHub  Download and install GitHub Desktop: https://desktop.github.com/\n Open it and go to File \u0026gt; Add Local Repository (Cmd-O). Select your project repository and click Add Repository\n If there any Changes list in the left-hand pane of the window, type \u0026ldquo;Initial commit\u0026rdquo; in the Summary field below, and then click the Commit to Master button.\n At the top right of the window, click Publish Repository (next to the cloud icon). In the pop-window, the default options should be fine, so just click Publish Repository button.\n  Your project code is now on GitHub. To see it, go to Repository \u0026gt; View on GitHub (Shift-Cmd-G) or visit https://github.com/YOUR-USERNAME/YOUR-PROJECT-DIRECTORY-NAME.\nDisplaying Your Project Preview on GitHub While you can host your project code on GitHub, you can also use it to host a live version of your site, the way it looks when you run quire preview.\n First, follow the steps above to start a GitHub repository for your project, if you haven’t already.\n In your project folder, open the config/environments/github.yml file.\n Update the baseURL to correspond to your own GitHub site. It will follow the pattern: https://YOUR-USERNAME.github.io/YOUR-PROJECT-DIRECTORY-NAME. So, if your GitHub username is bonjovi and your project file is blaze-of-glory, your baseURL would be https://bonjovi.github.io/blaze-of-glory.\n Open Terminal and navigate to your project (if it’s in your main user directory, just cd YOUR-PROJECT-DIRECTORY-NAME), and enter:\nbin/deploy.sh This runs a script to deploy your site to GitHub pages. The script may ask for your GitHub username and password. (Remember that the password cursor won’t move to show that you’re typing. Just type the password and hit enter.)\n  It will take a few minutes to propagate through GitHub’s system, but your site should now be published at https://YOUR-USERNAME.github.io/YOUR-PROJECT-DIRECTORY-NAME.\nNote that if you have a GitHub account that allows for private repositories, you can have a private repo and still run the deploy script. The code will note show up on the public GitHub site, but the preview will still be accessible at its URL. This is a good way of sharing a site preview to other collaborators during the development process, before your site is published.\nUsing GitHub to Manage Changes to Your Project TK\nUsing GitHub to Collaborate with Others on Your Project TK\n","headings":["\u003ch2 id=\"hosting-your-project-code-on-github\"\u003eHosting Your Project Code on GitHub\u003c/h2\u003e","\u003ch2 id=\"displaying-your-project-preview-on-github\"\u003eDisplaying Your Project Preview on GitHub\u003c/h2\u003e","\u003ch2 id=\"using-github-to-manage-changes-to-your-project\"\u003eUsing GitHub to Manage Changes to Your Project\u003c/h2\u003e","\u003ch2 id=\"using-github-to-collaborate-with-others-on-your-project\"\u003eUsing GitHub to Collaborate with Others on Your Project\u003c/h2\u003e"],"id":22,"length":373,"title":"GitHub for Quire","type":"essay","url":"https://gettypubs.github.io/quire/resources/github/"},{"content":"# ==============================================================================# Publication.yml# ------------------------------------------------------------------------------## This file houses the bibliographic info and general metadata for your digital# publication.# ------------------------------------------------------------------------------# Title \u0026amp; Description# ------------------------------------------------------------------------------title:subtitle:reading_line:short_title:description:one_line:full:online:pdf_ebook:promo_image:# ------------------------------------------------------------------------------# Publication Details# ------------------------------------------------------------------------------url:pub_date:language:pub_type:# book | journal-periodical | otheridentifier:isbn:issn:doi:uuid:series_periodical_name:series_issue_number:publisher:-name:location:url:# ------------------------------------------------------------------------------# Contributors# ------------------------------------------------------------------------------contributor_as_it_appears:contributor:-id:type:# primary | secondary | project-teamfirst_name:last_name:full_name:file_as:title:affiliation:role:role_code:bio:url:pic:# ------------------------------------------------------------------------------# Copright \u0026amp; License# ------------------------------------------------------------------------------copyright:license:name:abbreviation:url:icon:scope:# full | text-only | some-exceptionsonline_text:pdf_ebook_text:# ------------------------------------------------------------------------------# Formats, Resources \u0026amp; Links# ------------------------------------------------------------------------------resource_link:-type:# other-format | related-resource | footer-linkname:url:link_relation:media_type:identifier:isbn:issn:doi:uuid:icon:# ------------------------------------------------------------------------------# Subjects# ------------------------------------------------------------------------------subject:-type:# keyword | bisac | gettyname:identifier:library_of_congress_cip_data:# ------------------------------------------------------------------------------# Revision History# ------------------------------------------------------------------------------revision_history:-date:summary:repository_url:","headings":null,"id":23,"length":72,"title":"Sample `publication.yml` File","type":"essay","url":"https://gettypubs.github.io/quire/resources/sample-publication-file/"},{"content":" As a publishing tool, Quire’s goal is to maintain accessibility for keyboard and screen reader navigation, as well as for devices and browsers of varying sizes and capabilities and with limited functionality, such as those operation with no JavaScript and/or no CSS.\nThe principals outlined below have been informed in particular by:\n The 18F Accessibility Guide Carnegie Museums of Pittsburgh Web Accessibility Guidelines Adaptive Web Design, by @AaronGustafson https://adaptivewebdesign.info Inclusive Design Patterns, by @heydonworks  While not exhaustive, the list below is meant to highlight the key principals by which Quire was originally developed and that we recommend be followed by others developing their own Quire projects. It has been ordered roughly starting with those items most owned or effected by editors working on publication content and progressing into those owned or effected by developers working on publication styles, template markup, and interaction.\nKey Principals  Heading levels (H1 through H6) should indicate a content outline, not visual styles, as they are frequently used by screen readers for page navigation. Quire pages will have their titles placed in an H1 tag at the template level, and there should only ever be one H1 tag on a page. Headings in the Markdown content documents should start with H2. All headings should have content following them.\n All non-decorative images should have alt descriptive text. (Tips on crafting good alt text.)\n All formats (PDF, EPUB, MOBI, and print) must offer at least basic access to all the content of the publication. For example: videos, deep zoom images and maps should appear with fallback images; URLs to online content should be provided in text, and hover-over citations or glossary terms should be printed in full at the bottom of the page or in a separate section.\n A proper background/foreground color contrast ratio must be maintained for all elements. (Color contrast checker.)\n Links must have a visual indicator besides only color.\n All page content should be in an ARIA Landmark element/role.\n The first element on every page should be a “Skip to Main Content” skip link.\n Any element or piece of information that inherits meaning or context from its visual appearance, should be augmented with spoken, descriptive labels for screen readers. Quire templates make use of a visually-hidden CSS class. When applied to an element, the text within is hidden from view, but will be read aloud by screen-readers.\n If clicking on an interface element sends the user to a new page or a new location on the existing page, it should be an \u0026lt;a\u0026gt; link. If clicking changes the state of the current page, such as in opening a modal, it should be a \u0026lt;button\u0026gt;.\n Buttons that hide/reveal content and rely on JavaScript to do so, should be progressively created with JavaScript on the client side. In this way, if JavaScript is disabled or not functioning, the user will have access to all the content of the page.\n When viewed without JS, the page should be beautifully designed and fully navigable with no missing/hidden elements.\n When viewed without CSS, the complete contents of the page must be logically organized and readable.\n  ","headings":["\u003ch2 id=\"key-principals\"\u003eKey Principals\u003c/h2\u003e"],"id":24,"length":515,"title":"Accessibility Principals","type":"essay","url":"https://gettypubs.github.io/quire/resources/accessibility-principals/"},{"content":" History In 2009, the Getty Foundation launched a program called the Online Scholarly Catalogue Initiative (OSCI) to support eight museums’ efforts to publish their collection catalogues online. Having traditionally been published in print, collection catalogues were costly to produce, offered relatively little access (mostly through research libraries that would collect them), and were difficult, if not impossible, to update. At then end of the initiative, all eight museums had successfully published one or more collection catalogues online and had plans to do more. As discussed in the OSCI final report, however, some notable challenges remained, particularly around the discoverability of the catalogues after publication, and the longevity of the catalogues, both as individual digital objects out in the world and as publication processes internally.\nAround the time OSCI was wrapping up, Getty Publications was starting to undertake our own online publishing efforts. Though we had produced a single, trial online collection catalogue during the OSCI period, our renewed effort was focused on learning the lessons from that past project as well as from OSCI. Specifically, we aimed for a way to make these types of born digital publications more discoverable and longer lasting, while doing so in way that would be more sustainable internally. Enter static site generators, and multi-format publishing.\nStatic site generators like Hugo, the one under the hood in Quire, allow us to keep our content in plain text, and keep the complexity of building the site at the point of publication, rather than relying on ongoing build processes through a server that would need to be continually maintained. We could also use the static site generator (hooked together with some other tools) to put that plain text content into formats other than online sites. Formats like PDF, e-book and even print, that would allow the publication to live where other publications live (bookstores, Amazon, Google Books, the Library of Congress, WorldCat) and thereby dramatically improve its discoverability and its archival longevity.\nWho Uses Quire? We built Quire first for ourselves. In the last two years, we’ve published seven publications with early versions of Quire, and have seven more in the pipeline for the next two years. We’re also starting to look at ways at expanding its usage to other projects around the Getty, potentially including the annual report, documentation and reports, newsletters, and even online exhibitions.\nIn its present renditions, Quire is a tool for publishing professionals and private individuals with an interest in digital publishing and everyone in between. Quire’s versatility lends itself to a variety of projects and a diverse range of users.\nWhat is Quire’s Goal? Quire aims to streamline the digital publication process to create multi-faceted and sustainable books in multiple formats.\nWhat Are the Benefits of Using Quire? As an open-source framework, Quire provides a cost-friendly alternative to digital publishing that is inclusive of a variety of features and customization that allows for the realization of projects in a user-friendly manner. Quire allows for greater preservation and digital distribution of works in a simplified format that lends itself to user accessibility.\nWhat Is Quire? Quire is an open-source framework for the creation of multi-format publications. It consists of two distinct parts: 1. a set of software, and 2. a defined content model.\n Quire Software\nOn the software side, Quire packages together a number of programs: Prince for PDF/print versions, pe-epub for EPUB, and at the heart of things, the static-site generator Hugo for the online version. The file structure, layout templates, partials and shortcodes of Quire are all Hugo conventions that have been structured to allow us create more formal digital publications (essentially, dynamic websites that make use of of certain traditional print publication conventions like tables of contents, copyright and authorship information, linear reading orders, and the like).\n Quire Content Model\nThe content model is documented in the API/Docs section of this guide. It defines how publication content is structured and defined in Quire (including data on the publication itself, pages of the publication, contributors, figures, bibliography, etc.) and how the Quire software templates use this structured content. The content model is designed to be as independent of the Quire software stack as possible, so that long-term, it might be used in other ways. If, for example, any part of the Quire software were replaced with something new, or if the content of a publication were to be used for an entirely different use.\nQuire content model    Full size version of the content model\n  What Do the Quire Repositories Do? While conceptually, Quire is made of the two distinct parts defined above, these play out in multiple working parts in actual practice.\nquire-cli Quire CLI, or command line interface, (quire-cli) is the control for creating, previewing and outputting Quire projects. It is written in JavaScript and requires Node.js 8.9.4 LTS to run. Quire CLI is typically run from Terminal on a Mac, and Git Bash (or its equivalent) on a PC. The following commands are available:\n   Command Description     quire -V or quire --version Output the version number.   quire -h or quire --help Output usage information.   quire new project-name Create a new Quire project named project-name in the current directory. Name can be anything, but shouldn’t contain spaces.   quire preview Run a local server to preview the project in a browser. Defaults to previewing at http://localhost:1313/, but will use other port numbers (such as http://localhost:6532/) if 1313 is busy. The specific address will be listed in your command line terminal after running the command.   quire build Build the files of the current project into the public directory. These can then be hosted on any web server.   quire pdf Generate a PDF version of the current project.   quire epub Generate an EPUB version of the current project.    Read more in Install and Uninstall, and Multi-Format Output.\nquire-starter Quire Starter (quire-starter) is a starter content repository used as placeholder content when starting a new Quire project with the quire new command. It comes with some pre-defined example content and pages with which to get started.\nFile structure    quire-starter-theme Quire Starter Theme (quire-starter-theme) is the basic theme that is included when starting a new Quire project with the quire new command. It is designed to broadly cover a full range of use-cases and to demonstrate the range of Quire content model, without being too overly specific or complex, making it easy to customize and build from. Read more about the use of themes in Customizing Styles.\nStarter Theme    More themes will be added in the future.\nquire Quire (quire) is the repository for the guide and documentation you are currently reading.\n","headings":["\u003ch2 id=\"history\"\u003eHistory\u003c/h2\u003e","\u003ch2 id=\"who-uses-quire\"\u003eWho Uses Quire?\u003c/h2\u003e","\u003ch2 id=\"what-is-quire-s-goal\"\u003eWhat is Quire’s Goal?\u003c/h2\u003e","\u003ch2 id=\"what-are-the-benefits-of-using-quire\"\u003eWhat Are the Benefits of Using Quire?\u003c/h2\u003e","\u003ch2 id=\"what-is-quire\"\u003eWhat Is Quire?\u003c/h2\u003e","\u003ch2 id=\"what-do-the-quire-repositories-do\"\u003eWhat Do the Quire Repositories Do?\u003c/h2\u003e","\u003ch3 id=\"quire-cli\"\u003e\u003ccode\u003equire-cli\u003c/code\u003e\u003c/h3\u003e","\u003ch3 id=\"quire-starter\"\u003e\u003ccode\u003equire-starter\u003c/code\u003e\u003c/h3\u003e","\u003ch3 id=\"quire-starter-theme\"\u003e\u003ccode\u003equire-starter-theme\u003c/code\u003e\u003c/h3\u003e","\u003ch3 id=\"quire\"\u003e\u003ccode\u003equire\u003c/code\u003e\u003c/h3\u003e"],"id":25,"length":1097,"title":"About","type":"page","url":"https://gettypubs.github.io/quire/about/"},{"content":" Windows 10 Users:  Install the Windows Subsystem for Linux:\nOpen PowerShell as Administrator and run:\nEnable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux  Restart your computer when prompted.\nOpen the Microsoft Store and choose your favorite Linux distribution.\nQuire recommend Ubuntu\nFrom the distro\u0026rsquo;s page, select \u0026ldquo;Get\u0026rdquo;\nOnce the download has completed, select \u0026ldquo;Launch\u0026rdquo;.\n Download and install Prince:\n  From the terminal that just loaded\n cd ~  Run these commands to download and install PrinceXML\nwget https://www.princexml.com/download/prince_12-1_ubuntu18.04_amd64.deb sudo gdebi prince_10r2-1_debian8.0_amd64.deb If you chose a different distribution of Linux there are more instructions here -\u0026gt; https://www.princexml.com/doc-install/#linux\n Install node js and npm through nvm  Detailed information here -\u0026gt; https://github.com/creationix/nvm#install-script\nTo install or update nvm, you can use the [install script][2] using cURL:\n```sh curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash ``` or Wget: ```sh wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash ``` \u0026lt;sub\u0026gt;The script clones the nvm repository to `~/.nvm` and adds the source line to your profile (`~/.bash_profile`, `~/.zshrc`, `~/.profile`, or `~/.bashrc`).\u0026lt;/sub\u0026gt; ```sh export NVM_DIR=\u0026quot;$HOME/.nvm\u0026quot; [ -s \u0026quot;$NVM_DIR/nvm.sh\u0026quot; ] \u0026amp;\u0026amp; \\. \u0026quot;$NVM_DIR/nvm.sh\u0026quot; # This loads nvm ``` **Note:** You can add `--no-use` to the end of the above script (...`nvm.sh --no-use`) to postpone using `nvm` until you manually [`use`](#usage) it. You can customize the install source, directory, profile, and version using the `NVM_SOURCE`, `NVM_DIR`, `PROFILE`, and `NODE_VERSION` variables. Eg: `curl ... | NVM_DIR=\u0026quot;path/to/nvm\u0026quot;`. Ensure that the `NVM_DIR` does not contain a trailing slash. \u0026lt;sub\u0026gt;*NB. The installer can use `git`, `curl`, or `wget` to download `nvm`, whatever is available.*\u0026lt;/sub\u0026gt; **Note:** On Linux, after running the install script, if you get `nvm: command not found` or see no feedback from your terminal after you type: ```sh command -v nvm ``` simply close your current terminal, open a new terminal, and try verifying again. If the above doesn't fix the problem, open your `.bash_profile` and add the following line of code: `source ~/.bashrc` - For more information about this issue and possible workarounds, please [refer here](https://github.com/creationix/nvm/issues/576) ### Verify installation To verify that nvm has been installed, do: ```sh command -v nvm ``` which should output 'nvm' if the installation was successful. Please note that `which nvm` will not work, since `nvm` is a sourced shell function, not an executable binary. To download, compile, and install the latest release of node, do this: ```sh nvm install node ``` And then in any new shell just use the installed version: ```sh nvm use node ```   Install Quire-CLI\ngit clone https://github.com/gettypubs/quire-cli  cd quire-cli  git checkout pc-dev  Install Dependencies\nnpm install -g  Verify\nquire -V  If version number is returned quire-cli was installed correctly, you can now leave the directory.\ncd ~  All Other Windows Users:  Download Git for Windows by clicking on \u0026ldquo;Download\u0026rdquo; at https://gitforwindows.org/. An exe file will be downloaded, click on it and hit \u0026ldquo;run\u0026rdquo;, you should see a setup wizard screen that will install Git for Windows. During the installation, use the default settings.\n Download and install Node.js and npm at https://nodejs.org/en/download/. Make sure you get the LTS version of Node.js, npm will be installed during the same process. The Windows installer will be downloaded, just open it and a setup wizard screen will guide you through the process.\n Download Prince for Windows. You would download either the 32-bit installer or the 64-bit installer depending on your processor. To install Prince you can follow the instructions at their site: https://www.princexml.com/doc-install/#windows\n Open PowerShell (that should be installed by default in your Windows computer) and run it as administrator. To do so, right click on the icon and select \u0026ldquo;run as administrator\u0026rdquo; from the context menu. Then once you get the administrator PowerShell window, type the following command:\n   npm install --g --production windows-build-tools  This command installs c++ 2015 build tools and python 2 required for node-gyp. The process will take some time and you\u0026rsquo;ll see the prompt with your the name of your computer and your username once it\u0026rsquo;s complete.\n Continue using PowerShell, but this time it\u0026rsquo;s not required to run it as administrator (you can close the administrator window and open a new one) and type the following command to download Quire CLI to your computer from GitHub:   git clone https://github.com/gettypubs/quire-cli  A pop up window may emerge and ask you to type your GitHub username and password, then the download starts.\nChange directory to the quire-cli folder:\n cd quire-cli  and type:\n git checkout pc-dev  The following command will install dependencies:\n npm install -g  Installing the dependencies takes some time and you\u0026rsquo;ll notice multiple text strings being generated on the screen during the process. Wait until the prompt with your username shows up and then, to verify that quire-cli has been installed correctly, type:\n quire -V  If version number is returned, means that the install is correct.\nLastly, to navigate to your home directory and create a new project or publication type:\n cd ~  Starting a New Quire Project The steps you follow to create a new Quire publication or project are the same for all versions of Windows.\n To create a new project type:\nquire new your-project-name  This command will install the starter kit, set up the theme and install dependencies wait until you see a text string that says \u0026ldquo;theme and dependencies sucessfully installed\u0026rdquo; and the prompt with your username pops up.\n Then enter the new directory by typing:\ncd your-project-name  And install starter theme dependencies with the following command:\nquire install  This process can last a few minutes, once again wait until you see the prompt.\n Now you can preview the project, and any edits you\u0026rsquo;d make, by typing:\nquire preview  Once running, open a browser and visit http://localhost:1313 to see the publication. To stop the preview you can either press ctrl+c or type quire stop.\n  Troubleshooting TK\n  ","headings":["\u003ch3 id=\"windows-10-users\"\u003eWindows 10 Users:\u003c/h3\u003e","\u003ch3 id=\"all-other-windows-users\"\u003eAll Other Windows Users:\u003c/h3\u003e","\u003ch3 id=\"starting-a-new-quire-project\"\u003eStarting a New Quire Project\u003c/h3\u003e","\u003ch3 id=\"troubleshooting\"\u003eTroubleshooting\u003c/h3\u003e"],"id":26,"length":936,"title":"Quire Installation","type":"page","url":"https://gettypubs.github.io/quire/resources/install-pc/"}]